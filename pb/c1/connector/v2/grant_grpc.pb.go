// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: c1/connector/v2/grant.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrantsServiceClient is the client API for GrantsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrantsServiceClient interface {
	ListGrants(ctx context.Context, in *GrantsServiceListGrantsRequest, opts ...grpc.CallOption) (*GrantsServiceListGrantsResponse, error)
}

type grantsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrantsServiceClient(cc grpc.ClientConnInterface) GrantsServiceClient {
	return &grantsServiceClient{cc}
}

func (c *grantsServiceClient) ListGrants(ctx context.Context, in *GrantsServiceListGrantsRequest, opts ...grpc.CallOption) (*GrantsServiceListGrantsResponse, error) {
	out := new(GrantsServiceListGrantsResponse)
	err := c.cc.Invoke(ctx, "/c1.connector.v2.GrantsService/ListGrants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrantsServiceServer is the server API for GrantsService service.
// All implementations should embed UnimplementedGrantsServiceServer
// for forward compatibility
type GrantsServiceServer interface {
	ListGrants(context.Context, *GrantsServiceListGrantsRequest) (*GrantsServiceListGrantsResponse, error)
}

// UnimplementedGrantsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGrantsServiceServer struct {
}

func (UnimplementedGrantsServiceServer) ListGrants(context.Context, *GrantsServiceListGrantsRequest) (*GrantsServiceListGrantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGrants not implemented")
}

// UnsafeGrantsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrantsServiceServer will
// result in compilation errors.
type UnsafeGrantsServiceServer interface {
	mustEmbedUnimplementedGrantsServiceServer()
}

func RegisterGrantsServiceServer(s grpc.ServiceRegistrar, srv GrantsServiceServer) {
	s.RegisterService(&GrantsService_ServiceDesc, srv)
}

func _GrantsService_ListGrants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantsServiceListGrantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrantsServiceServer).ListGrants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/c1.connector.v2.GrantsService/ListGrants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrantsServiceServer).ListGrants(ctx, req.(*GrantsServiceListGrantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrantsService_ServiceDesc is the grpc.ServiceDesc for GrantsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrantsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "c1.connector.v2.GrantsService",
	HandlerType: (*GrantsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListGrants",
			Handler:    _GrantsService_ListGrants_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "c1/connector/v2/grant.proto",
}

// GrantManagerServiceClient is the client API for GrantManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrantManagerServiceClient interface {
	Grant(ctx context.Context, in *GrantManagerServiceGrantRequest, opts ...grpc.CallOption) (*GrantManagerServiceGrantResponse, error)
	Revoke(ctx context.Context, in *GrantManagerServiceRevokeRequest, opts ...grpc.CallOption) (*GrantManagerServiceRevokeResponse, error)
}

type grantManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrantManagerServiceClient(cc grpc.ClientConnInterface) GrantManagerServiceClient {
	return &grantManagerServiceClient{cc}
}

func (c *grantManagerServiceClient) Grant(ctx context.Context, in *GrantManagerServiceGrantRequest, opts ...grpc.CallOption) (*GrantManagerServiceGrantResponse, error) {
	out := new(GrantManagerServiceGrantResponse)
	err := c.cc.Invoke(ctx, "/c1.connector.v2.GrantManagerService/Grant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grantManagerServiceClient) Revoke(ctx context.Context, in *GrantManagerServiceRevokeRequest, opts ...grpc.CallOption) (*GrantManagerServiceRevokeResponse, error) {
	out := new(GrantManagerServiceRevokeResponse)
	err := c.cc.Invoke(ctx, "/c1.connector.v2.GrantManagerService/Revoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrantManagerServiceServer is the server API for GrantManagerService service.
// All implementations should embed UnimplementedGrantManagerServiceServer
// for forward compatibility
type GrantManagerServiceServer interface {
	Grant(context.Context, *GrantManagerServiceGrantRequest) (*GrantManagerServiceGrantResponse, error)
	Revoke(context.Context, *GrantManagerServiceRevokeRequest) (*GrantManagerServiceRevokeResponse, error)
}

// UnimplementedGrantManagerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGrantManagerServiceServer struct {
}

func (UnimplementedGrantManagerServiceServer) Grant(context.Context, *GrantManagerServiceGrantRequest) (*GrantManagerServiceGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Grant not implemented")
}
func (UnimplementedGrantManagerServiceServer) Revoke(context.Context, *GrantManagerServiceRevokeRequest) (*GrantManagerServiceRevokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revoke not implemented")
}

// UnsafeGrantManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrantManagerServiceServer will
// result in compilation errors.
type UnsafeGrantManagerServiceServer interface {
	mustEmbedUnimplementedGrantManagerServiceServer()
}

func RegisterGrantManagerServiceServer(s grpc.ServiceRegistrar, srv GrantManagerServiceServer) {
	s.RegisterService(&GrantManagerService_ServiceDesc, srv)
}

func _GrantManagerService_Grant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantManagerServiceGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrantManagerServiceServer).Grant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/c1.connector.v2.GrantManagerService/Grant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrantManagerServiceServer).Grant(ctx, req.(*GrantManagerServiceGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrantManagerService_Revoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantManagerServiceRevokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrantManagerServiceServer).Revoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/c1.connector.v2.GrantManagerService/Revoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrantManagerServiceServer).Revoke(ctx, req.(*GrantManagerServiceRevokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrantManagerService_ServiceDesc is the grpc.ServiceDesc for GrantManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrantManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "c1.connector.v2.GrantManagerService",
	HandlerType: (*GrantManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Grant",
			Handler:    _GrantManagerService_Grant_Handler,
		},
		{
			MethodName: "Revoke",
			Handler:    _GrantManagerService_Revoke_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "c1/connector/v2/grant.proto",
}
