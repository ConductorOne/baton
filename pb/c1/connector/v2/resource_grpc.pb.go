// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: c1/connector/v2/resource.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ResourceTypesService_ListResourceTypes_FullMethodName = "/c1.connector.v2.ResourceTypesService/ListResourceTypes"
)

// ResourceTypesServiceClient is the client API for ResourceTypesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceTypesServiceClient interface {
	ListResourceTypes(ctx context.Context, in *ResourceTypesServiceListResourceTypesRequest, opts ...grpc.CallOption) (*ResourceTypesServiceListResourceTypesResponse, error)
}

type resourceTypesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceTypesServiceClient(cc grpc.ClientConnInterface) ResourceTypesServiceClient {
	return &resourceTypesServiceClient{cc}
}

func (c *resourceTypesServiceClient) ListResourceTypes(ctx context.Context, in *ResourceTypesServiceListResourceTypesRequest, opts ...grpc.CallOption) (*ResourceTypesServiceListResourceTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResourceTypesServiceListResourceTypesResponse)
	err := c.cc.Invoke(ctx, ResourceTypesService_ListResourceTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceTypesServiceServer is the server API for ResourceTypesService service.
// All implementations should embed UnimplementedResourceTypesServiceServer
// for forward compatibility.
type ResourceTypesServiceServer interface {
	ListResourceTypes(context.Context, *ResourceTypesServiceListResourceTypesRequest) (*ResourceTypesServiceListResourceTypesResponse, error)
}

// UnimplementedResourceTypesServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedResourceTypesServiceServer struct{}

func (UnimplementedResourceTypesServiceServer) ListResourceTypes(context.Context, *ResourceTypesServiceListResourceTypesRequest) (*ResourceTypesServiceListResourceTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceTypes not implemented")
}
func (UnimplementedResourceTypesServiceServer) testEmbeddedByValue() {}

// UnsafeResourceTypesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceTypesServiceServer will
// result in compilation errors.
type UnsafeResourceTypesServiceServer interface {
	mustEmbedUnimplementedResourceTypesServiceServer()
}

func RegisterResourceTypesServiceServer(s grpc.ServiceRegistrar, srv ResourceTypesServiceServer) {
	// If the following call pancis, it indicates UnimplementedResourceTypesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ResourceTypesService_ServiceDesc, srv)
}

func _ResourceTypesService_ListResourceTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceTypesServiceListResourceTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceTypesServiceServer).ListResourceTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceTypesService_ListResourceTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceTypesServiceServer).ListResourceTypes(ctx, req.(*ResourceTypesServiceListResourceTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceTypesService_ServiceDesc is the grpc.ServiceDesc for ResourceTypesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceTypesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "c1.connector.v2.ResourceTypesService",
	HandlerType: (*ResourceTypesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListResourceTypes",
			Handler:    _ResourceTypesService_ListResourceTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "c1/connector/v2/resource.proto",
}

const (
	ResourcesService_ListResources_FullMethodName = "/c1.connector.v2.ResourcesService/ListResources"
)

// ResourcesServiceClient is the client API for ResourcesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourcesServiceClient interface {
	ListResources(ctx context.Context, in *ResourcesServiceListResourcesRequest, opts ...grpc.CallOption) (*ResourcesServiceListResourcesResponse, error)
}

type resourcesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourcesServiceClient(cc grpc.ClientConnInterface) ResourcesServiceClient {
	return &resourcesServiceClient{cc}
}

func (c *resourcesServiceClient) ListResources(ctx context.Context, in *ResourcesServiceListResourcesRequest, opts ...grpc.CallOption) (*ResourcesServiceListResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResourcesServiceListResourcesResponse)
	err := c.cc.Invoke(ctx, ResourcesService_ListResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourcesServiceServer is the server API for ResourcesService service.
// All implementations should embed UnimplementedResourcesServiceServer
// for forward compatibility.
type ResourcesServiceServer interface {
	ListResources(context.Context, *ResourcesServiceListResourcesRequest) (*ResourcesServiceListResourcesResponse, error)
}

// UnimplementedResourcesServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedResourcesServiceServer struct{}

func (UnimplementedResourcesServiceServer) ListResources(context.Context, *ResourcesServiceListResourcesRequest) (*ResourcesServiceListResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResources not implemented")
}
func (UnimplementedResourcesServiceServer) testEmbeddedByValue() {}

// UnsafeResourcesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourcesServiceServer will
// result in compilation errors.
type UnsafeResourcesServiceServer interface {
	mustEmbedUnimplementedResourcesServiceServer()
}

func RegisterResourcesServiceServer(s grpc.ServiceRegistrar, srv ResourcesServiceServer) {
	// If the following call pancis, it indicates UnimplementedResourcesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ResourcesService_ServiceDesc, srv)
}

func _ResourcesService_ListResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourcesServiceListResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesServiceServer).ListResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourcesService_ListResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesServiceServer).ListResources(ctx, req.(*ResourcesServiceListResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourcesService_ServiceDesc is the grpc.ServiceDesc for ResourcesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourcesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "c1.connector.v2.ResourcesService",
	HandlerType: (*ResourcesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListResources",
			Handler:    _ResourcesService_ListResources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "c1/connector/v2/resource.proto",
}
