// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: baton/v1/outputs.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ResourceDiff with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResourceDiff) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceDiff with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceDiffMultiError, or
// nil if none found.
func (m *ResourceDiff) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceDiff) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCreated() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceDiffValidationError{
						field:  fmt.Sprintf("Created[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceDiffValidationError{
						field:  fmt.Sprintf("Created[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceDiffValidationError{
					field:  fmt.Sprintf("Created[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDeleted() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceDiffValidationError{
						field:  fmt.Sprintf("Deleted[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceDiffValidationError{
						field:  fmt.Sprintf("Deleted[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceDiffValidationError{
					field:  fmt.Sprintf("Deleted[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetModified() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceDiffValidationError{
						field:  fmt.Sprintf("Modified[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceDiffValidationError{
						field:  fmt.Sprintf("Modified[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceDiffValidationError{
					field:  fmt.Sprintf("Modified[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResourceDiffMultiError(errors)
	}

	return nil
}

// ResourceDiffMultiError is an error wrapping multiple validation errors
// returned by ResourceDiff.ValidateAll() if the designated constraints aren't met.
type ResourceDiffMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceDiffMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceDiffMultiError) AllErrors() []error { return m }

// ResourceDiffValidationError is the validation error returned by
// ResourceDiff.Validate if the designated constraints aren't met.
type ResourceDiffValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceDiffValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceDiffValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceDiffValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceDiffValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceDiffValidationError) ErrorName() string { return "ResourceDiffValidationError" }

// Error satisfies the builtin error interface
func (e ResourceDiffValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceDiff.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceDiffValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceDiffValidationError{}

// Validate checks the field values on EntitlementDiff with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EntitlementDiff) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EntitlementDiff with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EntitlementDiffMultiError, or nil if none found.
func (m *EntitlementDiff) ValidateAll() error {
	return m.validate(true)
}

func (m *EntitlementDiff) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCreated() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EntitlementDiffValidationError{
						field:  fmt.Sprintf("Created[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EntitlementDiffValidationError{
						field:  fmt.Sprintf("Created[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntitlementDiffValidationError{
					field:  fmt.Sprintf("Created[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDeleted() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EntitlementDiffValidationError{
						field:  fmt.Sprintf("Deleted[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EntitlementDiffValidationError{
						field:  fmt.Sprintf("Deleted[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntitlementDiffValidationError{
					field:  fmt.Sprintf("Deleted[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetModified() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EntitlementDiffValidationError{
						field:  fmt.Sprintf("Modified[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EntitlementDiffValidationError{
						field:  fmt.Sprintf("Modified[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntitlementDiffValidationError{
					field:  fmt.Sprintf("Modified[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EntitlementDiffMultiError(errors)
	}

	return nil
}

// EntitlementDiffMultiError is an error wrapping multiple validation errors
// returned by EntitlementDiff.ValidateAll() if the designated constraints
// aren't met.
type EntitlementDiffMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntitlementDiffMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntitlementDiffMultiError) AllErrors() []error { return m }

// EntitlementDiffValidationError is the validation error returned by
// EntitlementDiff.Validate if the designated constraints aren't met.
type EntitlementDiffValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntitlementDiffValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntitlementDiffValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntitlementDiffValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntitlementDiffValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntitlementDiffValidationError) ErrorName() string { return "EntitlementDiffValidationError" }

// Error satisfies the builtin error interface
func (e EntitlementDiffValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntitlementDiff.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntitlementDiffValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntitlementDiffValidationError{}

// Validate checks the field values on GrantDiff with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GrantDiff) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantDiff with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GrantDiffMultiError, or nil
// if none found.
func (m *GrantDiff) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantDiff) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCreated() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GrantDiffValidationError{
						field:  fmt.Sprintf("Created[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GrantDiffValidationError{
						field:  fmt.Sprintf("Created[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GrantDiffValidationError{
					field:  fmt.Sprintf("Created[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDeleted() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GrantDiffValidationError{
						field:  fmt.Sprintf("Deleted[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GrantDiffValidationError{
						field:  fmt.Sprintf("Deleted[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GrantDiffValidationError{
					field:  fmt.Sprintf("Deleted[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetModified() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GrantDiffValidationError{
						field:  fmt.Sprintf("Modified[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GrantDiffValidationError{
						field:  fmt.Sprintf("Modified[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GrantDiffValidationError{
					field:  fmt.Sprintf("Modified[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GrantDiffMultiError(errors)
	}

	return nil
}

// GrantDiffMultiError is an error wrapping multiple validation errors returned
// by GrantDiff.ValidateAll() if the designated constraints aren't met.
type GrantDiffMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantDiffMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantDiffMultiError) AllErrors() []error { return m }

// GrantDiffValidationError is the validation error returned by
// GrantDiff.Validate if the designated constraints aren't met.
type GrantDiffValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantDiffValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantDiffValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantDiffValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantDiffValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantDiffValidationError) ErrorName() string { return "GrantDiffValidationError" }

// Error satisfies the builtin error interface
func (e GrantDiffValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantDiff.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantDiffValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantDiffValidationError{}

// Validate checks the field values on C1ZDiffOutput with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *C1ZDiffOutput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on C1ZDiffOutput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in C1ZDiffOutputMultiError, or
// nil if none found.
func (m *C1ZDiffOutput) ValidateAll() error {
	return m.validate(true)
}

func (m *C1ZDiffOutput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, C1ZDiffOutputValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, C1ZDiffOutputValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return C1ZDiffOutputValidationError{
				field:  "Resources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEntitlements()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, C1ZDiffOutputValidationError{
					field:  "Entitlements",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, C1ZDiffOutputValidationError{
					field:  "Entitlements",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntitlements()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return C1ZDiffOutputValidationError{
				field:  "Entitlements",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGrants()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, C1ZDiffOutputValidationError{
					field:  "Grants",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, C1ZDiffOutputValidationError{
					field:  "Grants",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrants()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return C1ZDiffOutputValidationError{
				field:  "Grants",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return C1ZDiffOutputMultiError(errors)
	}

	return nil
}

// C1ZDiffOutputMultiError is an error wrapping multiple validation errors
// returned by C1ZDiffOutput.ValidateAll() if the designated constraints
// aren't met.
type C1ZDiffOutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m C1ZDiffOutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m C1ZDiffOutputMultiError) AllErrors() []error { return m }

// C1ZDiffOutputValidationError is the validation error returned by
// C1ZDiffOutput.Validate if the designated constraints aren't met.
type C1ZDiffOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e C1ZDiffOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e C1ZDiffOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e C1ZDiffOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e C1ZDiffOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e C1ZDiffOutputValidationError) ErrorName() string { return "C1ZDiffOutputValidationError" }

// Error satisfies the builtin error interface
func (e C1ZDiffOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sC1ZDiffOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = C1ZDiffOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = C1ZDiffOutputValidationError{}

// Validate checks the field values on ResourceTypeOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceTypeOutput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceTypeOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceTypeOutputMultiError, or nil if none found.
func (m *ResourceTypeOutput) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceTypeOutput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResourceType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceTypeOutputValidationError{
					field:  "ResourceType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceTypeOutputValidationError{
					field:  "ResourceType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceTypeOutputValidationError{
				field:  "ResourceType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResourceTypeOutputMultiError(errors)
	}

	return nil
}

// ResourceTypeOutputMultiError is an error wrapping multiple validation errors
// returned by ResourceTypeOutput.ValidateAll() if the designated constraints
// aren't met.
type ResourceTypeOutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceTypeOutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceTypeOutputMultiError) AllErrors() []error { return m }

// ResourceTypeOutputValidationError is the validation error returned by
// ResourceTypeOutput.Validate if the designated constraints aren't met.
type ResourceTypeOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceTypeOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceTypeOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceTypeOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceTypeOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceTypeOutputValidationError) ErrorName() string {
	return "ResourceTypeOutputValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceTypeOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceTypeOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceTypeOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceTypeOutputValidationError{}

// Validate checks the field values on ResourceOutput with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResourceOutput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceOutput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceOutputMultiError,
// or nil if none found.
func (m *ResourceOutput) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceOutput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceOutputValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceOutputValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceOutputValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResourceType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceOutputValidationError{
					field:  "ResourceType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceOutputValidationError{
					field:  "ResourceType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceOutputValidationError{
				field:  "ResourceType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetParent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceOutputValidationError{
					field:  "Parent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceOutputValidationError{
					field:  "Parent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceOutputValidationError{
				field:  "Parent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResourceOutputMultiError(errors)
	}

	return nil
}

// ResourceOutputMultiError is an error wrapping multiple validation errors
// returned by ResourceOutput.ValidateAll() if the designated constraints
// aren't met.
type ResourceOutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceOutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceOutputMultiError) AllErrors() []error { return m }

// ResourceOutputValidationError is the validation error returned by
// ResourceOutput.Validate if the designated constraints aren't met.
type ResourceOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceOutputValidationError) ErrorName() string { return "ResourceOutputValidationError" }

// Error satisfies the builtin error interface
func (e ResourceOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceOutputValidationError{}

// Validate checks the field values on EntitlementOutput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EntitlementOutput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EntitlementOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EntitlementOutputMultiError, or nil if none found.
func (m *EntitlementOutput) ValidateAll() error {
	return m.validate(true)
}

func (m *EntitlementOutput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEntitlement()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EntitlementOutputValidationError{
					field:  "Entitlement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EntitlementOutputValidationError{
					field:  "Entitlement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntitlement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EntitlementOutputValidationError{
				field:  "Entitlement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EntitlementOutputValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EntitlementOutputValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EntitlementOutputValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResourceType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EntitlementOutputValidationError{
					field:  "ResourceType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EntitlementOutputValidationError{
					field:  "ResourceType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EntitlementOutputValidationError{
				field:  "ResourceType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EntitlementOutputMultiError(errors)
	}

	return nil
}

// EntitlementOutputMultiError is an error wrapping multiple validation errors
// returned by EntitlementOutput.ValidateAll() if the designated constraints
// aren't met.
type EntitlementOutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntitlementOutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntitlementOutputMultiError) AllErrors() []error { return m }

// EntitlementOutputValidationError is the validation error returned by
// EntitlementOutput.Validate if the designated constraints aren't met.
type EntitlementOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntitlementOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntitlementOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntitlementOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntitlementOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntitlementOutputValidationError) ErrorName() string {
	return "EntitlementOutputValidationError"
}

// Error satisfies the builtin error interface
func (e EntitlementOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntitlementOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntitlementOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntitlementOutputValidationError{}

// Validate checks the field values on GrantOutput with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GrantOutput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantOutput with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GrantOutputMultiError, or
// nil if none found.
func (m *GrantOutput) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantOutput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGrant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GrantOutputValidationError{
					field:  "Grant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GrantOutputValidationError{
					field:  "Grant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GrantOutputValidationError{
				field:  "Grant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEntitlement()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GrantOutputValidationError{
					field:  "Entitlement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GrantOutputValidationError{
					field:  "Entitlement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntitlement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GrantOutputValidationError{
				field:  "Entitlement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GrantOutputValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GrantOutputValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GrantOutputValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResourceType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GrantOutputValidationError{
					field:  "ResourceType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GrantOutputValidationError{
					field:  "ResourceType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GrantOutputValidationError{
				field:  "ResourceType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPrincipal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GrantOutputValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GrantOutputValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrincipal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GrantOutputValidationError{
				field:  "Principal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GrantOutputMultiError(errors)
	}

	return nil
}

// GrantOutputMultiError is an error wrapping multiple validation errors
// returned by GrantOutput.ValidateAll() if the designated constraints aren't met.
type GrantOutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantOutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantOutputMultiError) AllErrors() []error { return m }

// GrantOutputValidationError is the validation error returned by
// GrantOutput.Validate if the designated constraints aren't met.
type GrantOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantOutputValidationError) ErrorName() string { return "GrantOutputValidationError" }

// Error satisfies the builtin error interface
func (e GrantOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantOutputValidationError{}

// Validate checks the field values on ResourceAccessOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceAccessOutput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceAccessOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceAccessOutputMultiError, or nil if none found.
func (m *ResourceAccessOutput) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceAccessOutput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResourceType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceAccessOutputValidationError{
					field:  "ResourceType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceAccessOutputValidationError{
					field:  "ResourceType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceAccessOutputValidationError{
				field:  "ResourceType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceAccessOutputValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceAccessOutputValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceAccessOutputValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetEntitlements() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceAccessOutputValidationError{
						field:  fmt.Sprintf("Entitlements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceAccessOutputValidationError{
						field:  fmt.Sprintf("Entitlements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceAccessOutputValidationError{
					field:  fmt.Sprintf("Entitlements[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResourceAccessOutputMultiError(errors)
	}

	return nil
}

// ResourceAccessOutputMultiError is an error wrapping multiple validation
// errors returned by ResourceAccessOutput.ValidateAll() if the designated
// constraints aren't met.
type ResourceAccessOutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceAccessOutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceAccessOutputMultiError) AllErrors() []error { return m }

// ResourceAccessOutputValidationError is the validation error returned by
// ResourceAccessOutput.Validate if the designated constraints aren't met.
type ResourceAccessOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceAccessOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceAccessOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceAccessOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceAccessOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceAccessOutputValidationError) ErrorName() string {
	return "ResourceAccessOutputValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceAccessOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceAccessOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceAccessOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceAccessOutputValidationError{}

// Validate checks the field values on ResourceTypeListOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceTypeListOutput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceTypeListOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceTypeListOutputMultiError, or nil if none found.
func (m *ResourceTypeListOutput) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceTypeListOutput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResourceTypes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceTypeListOutputValidationError{
						field:  fmt.Sprintf("ResourceTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceTypeListOutputValidationError{
						field:  fmt.Sprintf("ResourceTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceTypeListOutputValidationError{
					field:  fmt.Sprintf("ResourceTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResourceTypeListOutputMultiError(errors)
	}

	return nil
}

// ResourceTypeListOutputMultiError is an error wrapping multiple validation
// errors returned by ResourceTypeListOutput.ValidateAll() if the designated
// constraints aren't met.
type ResourceTypeListOutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceTypeListOutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceTypeListOutputMultiError) AllErrors() []error { return m }

// ResourceTypeListOutputValidationError is the validation error returned by
// ResourceTypeListOutput.Validate if the designated constraints aren't met.
type ResourceTypeListOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceTypeListOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceTypeListOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceTypeListOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceTypeListOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceTypeListOutputValidationError) ErrorName() string {
	return "ResourceTypeListOutputValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceTypeListOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceTypeListOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceTypeListOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceTypeListOutputValidationError{}

// Validate checks the field values on ResourceListOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceListOutput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceListOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceListOutputMultiError, or nil if none found.
func (m *ResourceListOutput) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceListOutput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceListOutputValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceListOutputValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceListOutputValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResourceListOutputMultiError(errors)
	}

	return nil
}

// ResourceListOutputMultiError is an error wrapping multiple validation errors
// returned by ResourceListOutput.ValidateAll() if the designated constraints
// aren't met.
type ResourceListOutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceListOutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceListOutputMultiError) AllErrors() []error { return m }

// ResourceListOutputValidationError is the validation error returned by
// ResourceListOutput.Validate if the designated constraints aren't met.
type ResourceListOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceListOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceListOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceListOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceListOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceListOutputValidationError) ErrorName() string {
	return "ResourceListOutputValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceListOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceListOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceListOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceListOutputValidationError{}

// Validate checks the field values on EntitlementListOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EntitlementListOutput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EntitlementListOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EntitlementListOutputMultiError, or nil if none found.
func (m *EntitlementListOutput) ValidateAll() error {
	return m.validate(true)
}

func (m *EntitlementListOutput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntitlements() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EntitlementListOutputValidationError{
						field:  fmt.Sprintf("Entitlements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EntitlementListOutputValidationError{
						field:  fmt.Sprintf("Entitlements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntitlementListOutputValidationError{
					field:  fmt.Sprintf("Entitlements[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EntitlementListOutputMultiError(errors)
	}

	return nil
}

// EntitlementListOutputMultiError is an error wrapping multiple validation
// errors returned by EntitlementListOutput.ValidateAll() if the designated
// constraints aren't met.
type EntitlementListOutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntitlementListOutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntitlementListOutputMultiError) AllErrors() []error { return m }

// EntitlementListOutputValidationError is the validation error returned by
// EntitlementListOutput.Validate if the designated constraints aren't met.
type EntitlementListOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntitlementListOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntitlementListOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntitlementListOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntitlementListOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntitlementListOutputValidationError) ErrorName() string {
	return "EntitlementListOutputValidationError"
}

// Error satisfies the builtin error interface
func (e EntitlementListOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntitlementListOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntitlementListOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntitlementListOutputValidationError{}

// Validate checks the field values on GrantListOutput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GrantListOutput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantListOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GrantListOutputMultiError, or nil if none found.
func (m *GrantListOutput) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantListOutput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGrants() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GrantListOutputValidationError{
						field:  fmt.Sprintf("Grants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GrantListOutputValidationError{
						field:  fmt.Sprintf("Grants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GrantListOutputValidationError{
					field:  fmt.Sprintf("Grants[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GrantListOutputMultiError(errors)
	}

	return nil
}

// GrantListOutputMultiError is an error wrapping multiple validation errors
// returned by GrantListOutput.ValidateAll() if the designated constraints
// aren't met.
type GrantListOutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantListOutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantListOutputMultiError) AllErrors() []error { return m }

// GrantListOutputValidationError is the validation error returned by
// GrantListOutput.Validate if the designated constraints aren't met.
type GrantListOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantListOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantListOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantListOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantListOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantListOutputValidationError) ErrorName() string { return "GrantListOutputValidationError" }

// Error satisfies the builtin error interface
func (e GrantListOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantListOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantListOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantListOutputValidationError{}

// Validate checks the field values on ResourceAccessListOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceAccessListOutput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceAccessListOutput with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceAccessListOutputMultiError, or nil if none found.
func (m *ResourceAccessListOutput) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceAccessListOutput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPrincipal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceAccessListOutputValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceAccessListOutputValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrincipal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceAccessListOutputValidationError{
				field:  "Principal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAccess() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceAccessListOutputValidationError{
						field:  fmt.Sprintf("Access[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceAccessListOutputValidationError{
						field:  fmt.Sprintf("Access[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceAccessListOutputValidationError{
					field:  fmt.Sprintf("Access[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResourceAccessListOutputMultiError(errors)
	}

	return nil
}

// ResourceAccessListOutputMultiError is an error wrapping multiple validation
// errors returned by ResourceAccessListOutput.ValidateAll() if the designated
// constraints aren't met.
type ResourceAccessListOutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceAccessListOutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceAccessListOutputMultiError) AllErrors() []error { return m }

// ResourceAccessListOutputValidationError is the validation error returned by
// ResourceAccessListOutput.Validate if the designated constraints aren't met.
type ResourceAccessListOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceAccessListOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceAccessListOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceAccessListOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceAccessListOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceAccessListOutputValidationError) ErrorName() string {
	return "ResourceAccessListOutputValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceAccessListOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceAccessListOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceAccessListOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceAccessListOutputValidationError{}

// Validate checks the field values on PrincipalsCompareOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PrincipalsCompareOutput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrincipalsCompareOutput with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrincipalsCompareOutputMultiError, or nil if none found.
func (m *PrincipalsCompareOutput) ValidateAll() error {
	return m.validate(true)
}

func (m *PrincipalsCompareOutput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMissing() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PrincipalsCompareOutputValidationError{
						field:  fmt.Sprintf("Missing[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PrincipalsCompareOutputValidationError{
						field:  fmt.Sprintf("Missing[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PrincipalsCompareOutputValidationError{
					field:  fmt.Sprintf("Missing[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetExtra() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PrincipalsCompareOutputValidationError{
						field:  fmt.Sprintf("Extra[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PrincipalsCompareOutputValidationError{
						field:  fmt.Sprintf("Extra[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PrincipalsCompareOutputValidationError{
					field:  fmt.Sprintf("Extra[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetBase() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PrincipalsCompareOutputValidationError{
						field:  fmt.Sprintf("Base[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PrincipalsCompareOutputValidationError{
						field:  fmt.Sprintf("Base[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PrincipalsCompareOutputValidationError{
					field:  fmt.Sprintf("Base[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCompared() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PrincipalsCompareOutputValidationError{
						field:  fmt.Sprintf("Compared[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PrincipalsCompareOutputValidationError{
						field:  fmt.Sprintf("Compared[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PrincipalsCompareOutputValidationError{
					field:  fmt.Sprintf("Compared[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PrincipalsCompareOutputMultiError(errors)
	}

	return nil
}

// PrincipalsCompareOutputMultiError is an error wrapping multiple validation
// errors returned by PrincipalsCompareOutput.ValidateAll() if the designated
// constraints aren't met.
type PrincipalsCompareOutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrincipalsCompareOutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrincipalsCompareOutputMultiError) AllErrors() []error { return m }

// PrincipalsCompareOutputValidationError is the validation error returned by
// PrincipalsCompareOutput.Validate if the designated constraints aren't met.
type PrincipalsCompareOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrincipalsCompareOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrincipalsCompareOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrincipalsCompareOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrincipalsCompareOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrincipalsCompareOutputValidationError) ErrorName() string {
	return "PrincipalsCompareOutputValidationError"
}

// Error satisfies the builtin error interface
func (e PrincipalsCompareOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrincipalsCompareOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrincipalsCompareOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrincipalsCompareOutputValidationError{}
