// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: c1/reader/v2/resource.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ResourceTypesReaderService_GetResourceType_FullMethodName = "/c1.reader.v2.ResourceTypesReaderService/GetResourceType"
)

// ResourceTypesReaderServiceClient is the client API for ResourceTypesReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceTypesReaderServiceClient interface {
	GetResourceType(ctx context.Context, in *ResourceTypesReaderServiceGetResourceTypeRequest, opts ...grpc.CallOption) (*ResourceTypesReaderServiceGetResourceTypeResponse, error)
}

type resourceTypesReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceTypesReaderServiceClient(cc grpc.ClientConnInterface) ResourceTypesReaderServiceClient {
	return &resourceTypesReaderServiceClient{cc}
}

func (c *resourceTypesReaderServiceClient) GetResourceType(ctx context.Context, in *ResourceTypesReaderServiceGetResourceTypeRequest, opts ...grpc.CallOption) (*ResourceTypesReaderServiceGetResourceTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResourceTypesReaderServiceGetResourceTypeResponse)
	err := c.cc.Invoke(ctx, ResourceTypesReaderService_GetResourceType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceTypesReaderServiceServer is the server API for ResourceTypesReaderService service.
// All implementations should embed UnimplementedResourceTypesReaderServiceServer
// for forward compatibility.
type ResourceTypesReaderServiceServer interface {
	GetResourceType(context.Context, *ResourceTypesReaderServiceGetResourceTypeRequest) (*ResourceTypesReaderServiceGetResourceTypeResponse, error)
}

// UnimplementedResourceTypesReaderServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedResourceTypesReaderServiceServer struct{}

func (UnimplementedResourceTypesReaderServiceServer) GetResourceType(context.Context, *ResourceTypesReaderServiceGetResourceTypeRequest) (*ResourceTypesReaderServiceGetResourceTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceType not implemented")
}
func (UnimplementedResourceTypesReaderServiceServer) testEmbeddedByValue() {}

// UnsafeResourceTypesReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceTypesReaderServiceServer will
// result in compilation errors.
type UnsafeResourceTypesReaderServiceServer interface {
	mustEmbedUnimplementedResourceTypesReaderServiceServer()
}

func RegisterResourceTypesReaderServiceServer(s grpc.ServiceRegistrar, srv ResourceTypesReaderServiceServer) {
	// If the following call pancis, it indicates UnimplementedResourceTypesReaderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ResourceTypesReaderService_ServiceDesc, srv)
}

func _ResourceTypesReaderService_GetResourceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceTypesReaderServiceGetResourceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceTypesReaderServiceServer).GetResourceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceTypesReaderService_GetResourceType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceTypesReaderServiceServer).GetResourceType(ctx, req.(*ResourceTypesReaderServiceGetResourceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceTypesReaderService_ServiceDesc is the grpc.ServiceDesc for ResourceTypesReaderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceTypesReaderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "c1.reader.v2.ResourceTypesReaderService",
	HandlerType: (*ResourceTypesReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResourceType",
			Handler:    _ResourceTypesReaderService_GetResourceType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "c1/reader/v2/resource.proto",
}

const (
	ResourcesReaderService_GetResource_FullMethodName = "/c1.reader.v2.ResourcesReaderService/GetResource"
)

// ResourcesReaderServiceClient is the client API for ResourcesReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourcesReaderServiceClient interface {
	GetResource(ctx context.Context, in *ResourcesReaderServiceGetResourceRequest, opts ...grpc.CallOption) (*ResourcesReaderServiceGetResourceResponse, error)
}

type resourcesReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourcesReaderServiceClient(cc grpc.ClientConnInterface) ResourcesReaderServiceClient {
	return &resourcesReaderServiceClient{cc}
}

func (c *resourcesReaderServiceClient) GetResource(ctx context.Context, in *ResourcesReaderServiceGetResourceRequest, opts ...grpc.CallOption) (*ResourcesReaderServiceGetResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResourcesReaderServiceGetResourceResponse)
	err := c.cc.Invoke(ctx, ResourcesReaderService_GetResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourcesReaderServiceServer is the server API for ResourcesReaderService service.
// All implementations should embed UnimplementedResourcesReaderServiceServer
// for forward compatibility.
type ResourcesReaderServiceServer interface {
	GetResource(context.Context, *ResourcesReaderServiceGetResourceRequest) (*ResourcesReaderServiceGetResourceResponse, error)
}

// UnimplementedResourcesReaderServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedResourcesReaderServiceServer struct{}

func (UnimplementedResourcesReaderServiceServer) GetResource(context.Context, *ResourcesReaderServiceGetResourceRequest) (*ResourcesReaderServiceGetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (UnimplementedResourcesReaderServiceServer) testEmbeddedByValue() {}

// UnsafeResourcesReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourcesReaderServiceServer will
// result in compilation errors.
type UnsafeResourcesReaderServiceServer interface {
	mustEmbedUnimplementedResourcesReaderServiceServer()
}

func RegisterResourcesReaderServiceServer(s grpc.ServiceRegistrar, srv ResourcesReaderServiceServer) {
	// If the following call pancis, it indicates UnimplementedResourcesReaderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ResourcesReaderService_ServiceDesc, srv)
}

func _ResourcesReaderService_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourcesReaderServiceGetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesReaderServiceServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourcesReaderService_GetResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesReaderServiceServer).GetResource(ctx, req.(*ResourcesReaderServiceGetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourcesReaderService_ServiceDesc is the grpc.ServiceDesc for ResourcesReaderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourcesReaderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "c1.reader.v2.ResourcesReaderService",
	HandlerType: (*ResourcesReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResource",
			Handler:    _ResourcesReaderService_GetResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "c1/reader/v2/resource.proto",
}
