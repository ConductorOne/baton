// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: c1/reader/v2/sync.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SyncsReaderService_GetSync_FullMethodName               = "/c1.reader.v2.SyncsReaderService/GetSync"
	SyncsReaderService_ListSyncs_FullMethodName             = "/c1.reader.v2.SyncsReaderService/ListSyncs"
	SyncsReaderService_GetLatestFinishedSync_FullMethodName = "/c1.reader.v2.SyncsReaderService/GetLatestFinishedSync"
)

// SyncsReaderServiceClient is the client API for SyncsReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyncsReaderServiceClient interface {
	GetSync(ctx context.Context, in *SyncsReaderServiceGetSyncRequest, opts ...grpc.CallOption) (*SyncsReaderServiceGetSyncResponse, error)
	ListSyncs(ctx context.Context, in *SyncsReaderServiceListSyncsRequest, opts ...grpc.CallOption) (*SyncsReaderServiceListSyncsResponse, error)
	GetLatestFinishedSync(ctx context.Context, in *SyncsReaderServiceGetLatestFinishedSyncRequest, opts ...grpc.CallOption) (*SyncsReaderServiceGetLatestFinishedSyncResponse, error)
}

type syncsReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncsReaderServiceClient(cc grpc.ClientConnInterface) SyncsReaderServiceClient {
	return &syncsReaderServiceClient{cc}
}

func (c *syncsReaderServiceClient) GetSync(ctx context.Context, in *SyncsReaderServiceGetSyncRequest, opts ...grpc.CallOption) (*SyncsReaderServiceGetSyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncsReaderServiceGetSyncResponse)
	err := c.cc.Invoke(ctx, SyncsReaderService_GetSync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncsReaderServiceClient) ListSyncs(ctx context.Context, in *SyncsReaderServiceListSyncsRequest, opts ...grpc.CallOption) (*SyncsReaderServiceListSyncsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncsReaderServiceListSyncsResponse)
	err := c.cc.Invoke(ctx, SyncsReaderService_ListSyncs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncsReaderServiceClient) GetLatestFinishedSync(ctx context.Context, in *SyncsReaderServiceGetLatestFinishedSyncRequest, opts ...grpc.CallOption) (*SyncsReaderServiceGetLatestFinishedSyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncsReaderServiceGetLatestFinishedSyncResponse)
	err := c.cc.Invoke(ctx, SyncsReaderService_GetLatestFinishedSync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncsReaderServiceServer is the server API for SyncsReaderService service.
// All implementations should embed UnimplementedSyncsReaderServiceServer
// for forward compatibility.
type SyncsReaderServiceServer interface {
	GetSync(context.Context, *SyncsReaderServiceGetSyncRequest) (*SyncsReaderServiceGetSyncResponse, error)
	ListSyncs(context.Context, *SyncsReaderServiceListSyncsRequest) (*SyncsReaderServiceListSyncsResponse, error)
	GetLatestFinishedSync(context.Context, *SyncsReaderServiceGetLatestFinishedSyncRequest) (*SyncsReaderServiceGetLatestFinishedSyncResponse, error)
}

// UnimplementedSyncsReaderServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSyncsReaderServiceServer struct{}

func (UnimplementedSyncsReaderServiceServer) GetSync(context.Context, *SyncsReaderServiceGetSyncRequest) (*SyncsReaderServiceGetSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSync not implemented")
}
func (UnimplementedSyncsReaderServiceServer) ListSyncs(context.Context, *SyncsReaderServiceListSyncsRequest) (*SyncsReaderServiceListSyncsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSyncs not implemented")
}
func (UnimplementedSyncsReaderServiceServer) GetLatestFinishedSync(context.Context, *SyncsReaderServiceGetLatestFinishedSyncRequest) (*SyncsReaderServiceGetLatestFinishedSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestFinishedSync not implemented")
}
func (UnimplementedSyncsReaderServiceServer) testEmbeddedByValue() {}

// UnsafeSyncsReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncsReaderServiceServer will
// result in compilation errors.
type UnsafeSyncsReaderServiceServer interface {
	mustEmbedUnimplementedSyncsReaderServiceServer()
}

func RegisterSyncsReaderServiceServer(s grpc.ServiceRegistrar, srv SyncsReaderServiceServer) {
	// If the following call pancis, it indicates UnimplementedSyncsReaderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SyncsReaderService_ServiceDesc, srv)
}

func _SyncsReaderService_GetSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncsReaderServiceGetSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncsReaderServiceServer).GetSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncsReaderService_GetSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncsReaderServiceServer).GetSync(ctx, req.(*SyncsReaderServiceGetSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncsReaderService_ListSyncs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncsReaderServiceListSyncsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncsReaderServiceServer).ListSyncs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncsReaderService_ListSyncs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncsReaderServiceServer).ListSyncs(ctx, req.(*SyncsReaderServiceListSyncsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncsReaderService_GetLatestFinishedSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncsReaderServiceGetLatestFinishedSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncsReaderServiceServer).GetLatestFinishedSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncsReaderService_GetLatestFinishedSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncsReaderServiceServer).GetLatestFinishedSync(ctx, req.(*SyncsReaderServiceGetLatestFinishedSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SyncsReaderService_ServiceDesc is the grpc.ServiceDesc for SyncsReaderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyncsReaderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "c1.reader.v2.SyncsReaderService",
	HandlerType: (*SyncsReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSync",
			Handler:    _SyncsReaderService_GetSync_Handler,
		},
		{
			MethodName: "ListSyncs",
			Handler:    _SyncsReaderService_ListSyncs_Handler,
		},
		{
			MethodName: "GetLatestFinishedSync",
			Handler:    _SyncsReaderService_GetLatestFinishedSync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "c1/reader/v2/sync.proto",
}
