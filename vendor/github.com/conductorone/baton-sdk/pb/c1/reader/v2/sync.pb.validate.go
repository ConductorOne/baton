// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: c1/reader/v2/sync.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SyncRun with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SyncRun) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncRun with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SyncRunMultiError, or nil if none found.
func (m *SyncRun) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncRun) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetStartedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SyncRunValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SyncRunValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SyncRunValidationError{
				field:  "StartedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SyncRunValidationError{
					field:  "EndedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SyncRunValidationError{
					field:  "EndedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SyncRunValidationError{
				field:  "EndedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SyncToken

	if len(errors) > 0 {
		return SyncRunMultiError(errors)
	}

	return nil
}

// SyncRunMultiError is an error wrapping multiple validation errors returned
// by SyncRun.ValidateAll() if the designated constraints aren't met.
type SyncRunMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncRunMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncRunMultiError) AllErrors() []error { return m }

// SyncRunValidationError is the validation error returned by SyncRun.Validate
// if the designated constraints aren't met.
type SyncRunValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncRunValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncRunValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncRunValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncRunValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncRunValidationError) ErrorName() string { return "SyncRunValidationError" }

// Error satisfies the builtin error interface
func (e SyncRunValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncRun.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncRunValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncRunValidationError{}

// Validate checks the field values on SyncsReaderServiceGetSyncRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SyncsReaderServiceGetSyncRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncsReaderServiceGetSyncRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SyncsReaderServiceGetSyncRequestMultiError, or nil if none found.
func (m *SyncsReaderServiceGetSyncRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncsReaderServiceGetSyncRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SyncId

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SyncsReaderServiceGetSyncRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SyncsReaderServiceGetSyncRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SyncsReaderServiceGetSyncRequestValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SyncsReaderServiceGetSyncRequestMultiError(errors)
	}

	return nil
}

// SyncsReaderServiceGetSyncRequestMultiError is an error wrapping multiple
// validation errors returned by
// SyncsReaderServiceGetSyncRequest.ValidateAll() if the designated
// constraints aren't met.
type SyncsReaderServiceGetSyncRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncsReaderServiceGetSyncRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncsReaderServiceGetSyncRequestMultiError) AllErrors() []error { return m }

// SyncsReaderServiceGetSyncRequestValidationError is the validation error
// returned by SyncsReaderServiceGetSyncRequest.Validate if the designated
// constraints aren't met.
type SyncsReaderServiceGetSyncRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncsReaderServiceGetSyncRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncsReaderServiceGetSyncRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncsReaderServiceGetSyncRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncsReaderServiceGetSyncRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncsReaderServiceGetSyncRequestValidationError) ErrorName() string {
	return "SyncsReaderServiceGetSyncRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SyncsReaderServiceGetSyncRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncsReaderServiceGetSyncRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncsReaderServiceGetSyncRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncsReaderServiceGetSyncRequestValidationError{}

// Validate checks the field values on SyncsReaderServiceGetSyncResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SyncsReaderServiceGetSyncResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncsReaderServiceGetSyncResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SyncsReaderServiceGetSyncResponseMultiError, or nil if none found.
func (m *SyncsReaderServiceGetSyncResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncsReaderServiceGetSyncResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSync()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SyncsReaderServiceGetSyncResponseValidationError{
					field:  "Sync",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SyncsReaderServiceGetSyncResponseValidationError{
					field:  "Sync",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSync()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SyncsReaderServiceGetSyncResponseValidationError{
				field:  "Sync",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SyncsReaderServiceGetSyncResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SyncsReaderServiceGetSyncResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SyncsReaderServiceGetSyncResponseValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SyncsReaderServiceGetSyncResponseMultiError(errors)
	}

	return nil
}

// SyncsReaderServiceGetSyncResponseMultiError is an error wrapping multiple
// validation errors returned by
// SyncsReaderServiceGetSyncResponse.ValidateAll() if the designated
// constraints aren't met.
type SyncsReaderServiceGetSyncResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncsReaderServiceGetSyncResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncsReaderServiceGetSyncResponseMultiError) AllErrors() []error { return m }

// SyncsReaderServiceGetSyncResponseValidationError is the validation error
// returned by SyncsReaderServiceGetSyncResponse.Validate if the designated
// constraints aren't met.
type SyncsReaderServiceGetSyncResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncsReaderServiceGetSyncResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncsReaderServiceGetSyncResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncsReaderServiceGetSyncResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncsReaderServiceGetSyncResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncsReaderServiceGetSyncResponseValidationError) ErrorName() string {
	return "SyncsReaderServiceGetSyncResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SyncsReaderServiceGetSyncResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncsReaderServiceGetSyncResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncsReaderServiceGetSyncResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncsReaderServiceGetSyncResponseValidationError{}

// Validate checks the field values on SyncsReaderServiceListSyncsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SyncsReaderServiceListSyncsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncsReaderServiceListSyncsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SyncsReaderServiceListSyncsRequestMultiError, or nil if none found.
func (m *SyncsReaderServiceListSyncsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncsReaderServiceListSyncsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 250 {
			err := SyncsReaderServiceListSyncsRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 250",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPageToken() != "" {

		if l := len(m.GetPageToken()); l < 1 || l > 2048 {
			err := SyncsReaderServiceListSyncsRequestValidationError{
				field:  "PageToken",
				reason: "value length must be between 1 and 2048 bytes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SyncsReaderServiceListSyncsRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SyncsReaderServiceListSyncsRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SyncsReaderServiceListSyncsRequestValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SyncsReaderServiceListSyncsRequestMultiError(errors)
	}

	return nil
}

// SyncsReaderServiceListSyncsRequestMultiError is an error wrapping multiple
// validation errors returned by
// SyncsReaderServiceListSyncsRequest.ValidateAll() if the designated
// constraints aren't met.
type SyncsReaderServiceListSyncsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncsReaderServiceListSyncsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncsReaderServiceListSyncsRequestMultiError) AllErrors() []error { return m }

// SyncsReaderServiceListSyncsRequestValidationError is the validation error
// returned by SyncsReaderServiceListSyncsRequest.Validate if the designated
// constraints aren't met.
type SyncsReaderServiceListSyncsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncsReaderServiceListSyncsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncsReaderServiceListSyncsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncsReaderServiceListSyncsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncsReaderServiceListSyncsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncsReaderServiceListSyncsRequestValidationError) ErrorName() string {
	return "SyncsReaderServiceListSyncsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SyncsReaderServiceListSyncsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncsReaderServiceListSyncsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncsReaderServiceListSyncsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncsReaderServiceListSyncsRequestValidationError{}

// Validate checks the field values on SyncsReaderServiceListSyncsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SyncsReaderServiceListSyncsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncsReaderServiceListSyncsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SyncsReaderServiceListSyncsResponseMultiError, or nil if none found.
func (m *SyncsReaderServiceListSyncsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncsReaderServiceListSyncsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSyncs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SyncsReaderServiceListSyncsResponseValidationError{
						field:  fmt.Sprintf("Syncs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SyncsReaderServiceListSyncsResponseValidationError{
						field:  fmt.Sprintf("Syncs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SyncsReaderServiceListSyncsResponseValidationError{
					field:  fmt.Sprintf("Syncs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetNextPageToken() != "" {

		if l := len(m.GetNextPageToken()); l < 1 || l > 2048 {
			err := SyncsReaderServiceListSyncsResponseValidationError{
				field:  "NextPageToken",
				reason: "value length must be between 1 and 2048 bytes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SyncsReaderServiceListSyncsResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SyncsReaderServiceListSyncsResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SyncsReaderServiceListSyncsResponseValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SyncsReaderServiceListSyncsResponseMultiError(errors)
	}

	return nil
}

// SyncsReaderServiceListSyncsResponseMultiError is an error wrapping multiple
// validation errors returned by
// SyncsReaderServiceListSyncsResponse.ValidateAll() if the designated
// constraints aren't met.
type SyncsReaderServiceListSyncsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncsReaderServiceListSyncsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncsReaderServiceListSyncsResponseMultiError) AllErrors() []error { return m }

// SyncsReaderServiceListSyncsResponseValidationError is the validation error
// returned by SyncsReaderServiceListSyncsResponse.Validate if the designated
// constraints aren't met.
type SyncsReaderServiceListSyncsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncsReaderServiceListSyncsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncsReaderServiceListSyncsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncsReaderServiceListSyncsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncsReaderServiceListSyncsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncsReaderServiceListSyncsResponseValidationError) ErrorName() string {
	return "SyncsReaderServiceListSyncsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SyncsReaderServiceListSyncsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncsReaderServiceListSyncsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncsReaderServiceListSyncsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncsReaderServiceListSyncsResponseValidationError{}

// Validate checks the field values on
// SyncsReaderServiceGetLatestFinishedSyncRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SyncsReaderServiceGetLatestFinishedSyncRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SyncsReaderServiceGetLatestFinishedSyncRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SyncsReaderServiceGetLatestFinishedSyncRequestMultiError, or nil if none found.
func (m *SyncsReaderServiceGetLatestFinishedSyncRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncsReaderServiceGetLatestFinishedSyncRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SyncsReaderServiceGetLatestFinishedSyncRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SyncsReaderServiceGetLatestFinishedSyncRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SyncsReaderServiceGetLatestFinishedSyncRequestValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SyncsReaderServiceGetLatestFinishedSyncRequestMultiError(errors)
	}

	return nil
}

// SyncsReaderServiceGetLatestFinishedSyncRequestMultiError is an error
// wrapping multiple validation errors returned by
// SyncsReaderServiceGetLatestFinishedSyncRequest.ValidateAll() if the
// designated constraints aren't met.
type SyncsReaderServiceGetLatestFinishedSyncRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncsReaderServiceGetLatestFinishedSyncRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncsReaderServiceGetLatestFinishedSyncRequestMultiError) AllErrors() []error { return m }

// SyncsReaderServiceGetLatestFinishedSyncRequestValidationError is the
// validation error returned by
// SyncsReaderServiceGetLatestFinishedSyncRequest.Validate if the designated
// constraints aren't met.
type SyncsReaderServiceGetLatestFinishedSyncRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncsReaderServiceGetLatestFinishedSyncRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncsReaderServiceGetLatestFinishedSyncRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SyncsReaderServiceGetLatestFinishedSyncRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncsReaderServiceGetLatestFinishedSyncRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncsReaderServiceGetLatestFinishedSyncRequestValidationError) ErrorName() string {
	return "SyncsReaderServiceGetLatestFinishedSyncRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SyncsReaderServiceGetLatestFinishedSyncRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncsReaderServiceGetLatestFinishedSyncRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncsReaderServiceGetLatestFinishedSyncRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncsReaderServiceGetLatestFinishedSyncRequestValidationError{}

// Validate checks the field values on
// SyncsReaderServiceGetLatestFinishedSyncResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SyncsReaderServiceGetLatestFinishedSyncResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SyncsReaderServiceGetLatestFinishedSyncResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SyncsReaderServiceGetLatestFinishedSyncResponseMultiError, or nil if none found.
func (m *SyncsReaderServiceGetLatestFinishedSyncResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncsReaderServiceGetLatestFinishedSyncResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSync()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SyncsReaderServiceGetLatestFinishedSyncResponseValidationError{
					field:  "Sync",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SyncsReaderServiceGetLatestFinishedSyncResponseValidationError{
					field:  "Sync",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSync()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SyncsReaderServiceGetLatestFinishedSyncResponseValidationError{
				field:  "Sync",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SyncsReaderServiceGetLatestFinishedSyncResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SyncsReaderServiceGetLatestFinishedSyncResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SyncsReaderServiceGetLatestFinishedSyncResponseValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SyncsReaderServiceGetLatestFinishedSyncResponseMultiError(errors)
	}

	return nil
}

// SyncsReaderServiceGetLatestFinishedSyncResponseMultiError is an error
// wrapping multiple validation errors returned by
// SyncsReaderServiceGetLatestFinishedSyncResponse.ValidateAll() if the
// designated constraints aren't met.
type SyncsReaderServiceGetLatestFinishedSyncResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncsReaderServiceGetLatestFinishedSyncResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncsReaderServiceGetLatestFinishedSyncResponseMultiError) AllErrors() []error { return m }

// SyncsReaderServiceGetLatestFinishedSyncResponseValidationError is the
// validation error returned by
// SyncsReaderServiceGetLatestFinishedSyncResponse.Validate if the designated
// constraints aren't met.
type SyncsReaderServiceGetLatestFinishedSyncResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncsReaderServiceGetLatestFinishedSyncResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SyncsReaderServiceGetLatestFinishedSyncResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SyncsReaderServiceGetLatestFinishedSyncResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncsReaderServiceGetLatestFinishedSyncResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncsReaderServiceGetLatestFinishedSyncResponseValidationError) ErrorName() string {
	return "SyncsReaderServiceGetLatestFinishedSyncResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SyncsReaderServiceGetLatestFinishedSyncResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncsReaderServiceGetLatestFinishedSyncResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncsReaderServiceGetLatestFinishedSyncResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncsReaderServiceGetLatestFinishedSyncResponseValidationError{}
