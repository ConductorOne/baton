// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: c1/config/v1/config.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Configuration with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Configuration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Configuration with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConfigurationMultiError, or
// nil if none found.
func (m *Configuration) ValidateAll() error {
	return m.validate(true)
}

func (m *Configuration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFields() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigurationValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigurationValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigurationValidationError{
					field:  fmt.Sprintf("Fields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetConstraints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigurationValidationError{
						field:  fmt.Sprintf("Constraints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigurationValidationError{
						field:  fmt.Sprintf("Constraints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigurationValidationError{
					field:  fmt.Sprintf("Constraints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for DisplayName

	// no validation rules for HelpUrl

	// no validation rules for IconUrl

	// no validation rules for IsDirectory

	// no validation rules for CatalogId

	if len(errors) > 0 {
		return ConfigurationMultiError(errors)
	}

	return nil
}

// ConfigurationMultiError is an error wrapping multiple validation errors
// returned by Configuration.ValidateAll() if the designated constraints
// aren't met.
type ConfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigurationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigurationMultiError) AllErrors() []error { return m }

// ConfigurationValidationError is the validation error returned by
// Configuration.Validate if the designated constraints aren't met.
type ConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigurationValidationError) ErrorName() string { return "ConfigurationValidationError" }

// Error satisfies the builtin error interface
func (e ConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigurationValidationError{}

// Validate checks the field values on Constraint with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Constraint) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Constraint with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConstraintMultiError, or
// nil if none found.
func (m *Constraint) ValidateAll() error {
	return m.validate(true)
}

func (m *Constraint) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Kind

	// no validation rules for Name

	// no validation rules for HelpText

	// no validation rules for IsFieldGroup

	if len(errors) > 0 {
		return ConstraintMultiError(errors)
	}

	return nil
}

// ConstraintMultiError is an error wrapping multiple validation errors
// returned by Constraint.ValidateAll() if the designated constraints aren't met.
type ConstraintMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConstraintMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConstraintMultiError) AllErrors() []error { return m }

// ConstraintValidationError is the validation error returned by
// Constraint.Validate if the designated constraints aren't met.
type ConstraintValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConstraintValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConstraintValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConstraintValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConstraintValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConstraintValidationError) ErrorName() string { return "ConstraintValidationError" }

// Error satisfies the builtin error interface
func (e ConstraintValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConstraint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConstraintValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConstraintValidationError{}

// Validate checks the field values on Field with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Field) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Field with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FieldMultiError, or nil if none found.
func (m *Field) ValidateAll() error {
	return m.validate(true)
}

func (m *Field) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for Description

	// no validation rules for Placeholder

	// no validation rules for IsRequired

	// no validation rules for IsOps

	// no validation rules for IsSecret

	switch v := m.Field.(type) {
	case *Field_StringField:
		if v == nil {
			err := FieldValidationError{
				field:  "Field",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStringField()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FieldValidationError{
						field:  "StringField",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FieldValidationError{
						field:  "StringField",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStringField()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FieldValidationError{
					field:  "StringField",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Field_IntField:
		if v == nil {
			err := FieldValidationError{
				field:  "Field",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetIntField()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FieldValidationError{
						field:  "IntField",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FieldValidationError{
						field:  "IntField",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIntField()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FieldValidationError{
					field:  "IntField",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Field_BoolField:
		if v == nil {
			err := FieldValidationError{
				field:  "Field",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBoolField()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FieldValidationError{
						field:  "BoolField",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FieldValidationError{
						field:  "BoolField",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBoolField()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FieldValidationError{
					field:  "BoolField",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Field_StringSliceField:
		if v == nil {
			err := FieldValidationError{
				field:  "Field",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStringSliceField()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FieldValidationError{
						field:  "StringSliceField",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FieldValidationError{
						field:  "StringSliceField",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStringSliceField()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FieldValidationError{
					field:  "StringSliceField",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Field_StringMapField:
		if v == nil {
			err := FieldValidationError{
				field:  "Field",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStringMapField()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FieldValidationError{
						field:  "StringMapField",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FieldValidationError{
						field:  "StringMapField",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStringMapField()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FieldValidationError{
					field:  "StringMapField",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return FieldMultiError(errors)
	}

	return nil
}

// FieldMultiError is an error wrapping multiple validation errors returned by
// Field.ValidateAll() if the designated constraints aren't met.
type FieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FieldMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FieldMultiError) AllErrors() []error { return m }

// FieldValidationError is the validation error returned by Field.Validate if
// the designated constraints aren't met.
type FieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FieldValidationError) ErrorName() string { return "FieldValidationError" }

// Error satisfies the builtin error interface
func (e FieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FieldValidationError{}

// Validate checks the field values on IntField with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IntField) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntField with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IntFieldMultiError, or nil
// if none found.
func (m *IntField) ValidateAll() error {
	return m.validate(true)
}

func (m *IntField) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DefaultValue

	if m.Rules != nil {

		if all {
			switch v := interface{}(m.GetRules()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntFieldValidationError{
						field:  "Rules",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntFieldValidationError{
						field:  "Rules",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRules()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntFieldValidationError{
					field:  "Rules",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IntFieldMultiError(errors)
	}

	return nil
}

// IntFieldMultiError is an error wrapping multiple validation errors returned
// by IntField.ValidateAll() if the designated constraints aren't met.
type IntFieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntFieldMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntFieldMultiError) AllErrors() []error { return m }

// IntFieldValidationError is the validation error returned by
// IntField.Validate if the designated constraints aren't met.
type IntFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntFieldValidationError) ErrorName() string { return "IntFieldValidationError" }

// Error satisfies the builtin error interface
func (e IntFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntFieldValidationError{}

// Validate checks the field values on BoolField with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BoolField) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BoolField with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BoolFieldMultiError, or nil
// if none found.
func (m *BoolField) ValidateAll() error {
	return m.validate(true)
}

func (m *BoolField) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DefaultValue

	if m.Rules != nil {

		if all {
			switch v := interface{}(m.GetRules()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BoolFieldValidationError{
						field:  "Rules",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BoolFieldValidationError{
						field:  "Rules",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRules()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BoolFieldValidationError{
					field:  "Rules",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BoolFieldMultiError(errors)
	}

	return nil
}

// BoolFieldMultiError is an error wrapping multiple validation errors returned
// by BoolField.ValidateAll() if the designated constraints aren't met.
type BoolFieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BoolFieldMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BoolFieldMultiError) AllErrors() []error { return m }

// BoolFieldValidationError is the validation error returned by
// BoolField.Validate if the designated constraints aren't met.
type BoolFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BoolFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BoolFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BoolFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BoolFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BoolFieldValidationError) ErrorName() string { return "BoolFieldValidationError" }

// Error satisfies the builtin error interface
func (e BoolFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBoolField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BoolFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BoolFieldValidationError{}

// Validate checks the field values on StringSliceField with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StringSliceField) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StringSliceField with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StringSliceFieldMultiError, or nil if none found.
func (m *StringSliceField) ValidateAll() error {
	return m.validate(true)
}

func (m *StringSliceField) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Rules != nil {

		if all {
			switch v := interface{}(m.GetRules()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StringSliceFieldValidationError{
						field:  "Rules",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StringSliceFieldValidationError{
						field:  "Rules",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRules()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StringSliceFieldValidationError{
					field:  "Rules",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StringSliceFieldMultiError(errors)
	}

	return nil
}

// StringSliceFieldMultiError is an error wrapping multiple validation errors
// returned by StringSliceField.ValidateAll() if the designated constraints
// aren't met.
type StringSliceFieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StringSliceFieldMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StringSliceFieldMultiError) AllErrors() []error { return m }

// StringSliceFieldValidationError is the validation error returned by
// StringSliceField.Validate if the designated constraints aren't met.
type StringSliceFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringSliceFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringSliceFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringSliceFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringSliceFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringSliceFieldValidationError) ErrorName() string { return "StringSliceFieldValidationError" }

// Error satisfies the builtin error interface
func (e StringSliceFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringSliceField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringSliceFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringSliceFieldValidationError{}

// Validate checks the field values on StringMapField with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StringMapField) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StringMapField with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StringMapFieldMultiError,
// or nil if none found.
func (m *StringMapField) ValidateAll() error {
	return m.validate(true)
}

func (m *StringMapField) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetDefaultValue()))
		i := 0
		for key := range m.GetDefaultValue() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetDefaultValue()[key]
			_ = val

			// no validation rules for DefaultValue[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, StringMapFieldValidationError{
							field:  fmt.Sprintf("DefaultValue[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, StringMapFieldValidationError{
							field:  fmt.Sprintf("DefaultValue[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return StringMapFieldValidationError{
						field:  fmt.Sprintf("DefaultValue[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if m.Rules != nil {

		if all {
			switch v := interface{}(m.GetRules()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StringMapFieldValidationError{
						field:  "Rules",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StringMapFieldValidationError{
						field:  "Rules",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRules()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StringMapFieldValidationError{
					field:  "Rules",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StringMapFieldMultiError(errors)
	}

	return nil
}

// StringMapFieldMultiError is an error wrapping multiple validation errors
// returned by StringMapField.ValidateAll() if the designated constraints
// aren't met.
type StringMapFieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StringMapFieldMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StringMapFieldMultiError) AllErrors() []error { return m }

// StringMapFieldValidationError is the validation error returned by
// StringMapField.Validate if the designated constraints aren't met.
type StringMapFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringMapFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringMapFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringMapFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringMapFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringMapFieldValidationError) ErrorName() string { return "StringMapFieldValidationError" }

// Error satisfies the builtin error interface
func (e StringMapFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringMapField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringMapFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringMapFieldValidationError{}

// Validate checks the field values on StringFieldOption with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StringFieldOption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StringFieldOption with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StringFieldOptionMultiError, or nil if none found.
func (m *StringFieldOption) ValidateAll() error {
	return m.validate(true)
}

func (m *StringFieldOption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Value

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return StringFieldOptionMultiError(errors)
	}

	return nil
}

// StringFieldOptionMultiError is an error wrapping multiple validation errors
// returned by StringFieldOption.ValidateAll() if the designated constraints
// aren't met.
type StringFieldOptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StringFieldOptionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StringFieldOptionMultiError) AllErrors() []error { return m }

// StringFieldOptionValidationError is the validation error returned by
// StringFieldOption.Validate if the designated constraints aren't met.
type StringFieldOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringFieldOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringFieldOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringFieldOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringFieldOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringFieldOptionValidationError) ErrorName() string {
	return "StringFieldOptionValidationError"
}

// Error satisfies the builtin error interface
func (e StringFieldOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringFieldOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringFieldOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringFieldOptionValidationError{}

// Validate checks the field values on StringField with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StringField) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StringField with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StringFieldMultiError, or
// nil if none found.
func (m *StringField) ValidateAll() error {
	return m.validate(true)
}

func (m *StringField) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DefaultValue

	// no validation rules for Type

	for idx, item := range m.GetOptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StringFieldValidationError{
						field:  fmt.Sprintf("Options[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StringFieldValidationError{
						field:  fmt.Sprintf("Options[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StringFieldValidationError{
					field:  fmt.Sprintf("Options[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Rules != nil {

		if all {
			switch v := interface{}(m.GetRules()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StringFieldValidationError{
						field:  "Rules",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StringFieldValidationError{
						field:  "Rules",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRules()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StringFieldValidationError{
					field:  "Rules",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StringFieldMultiError(errors)
	}

	return nil
}

// StringFieldMultiError is an error wrapping multiple validation errors
// returned by StringField.ValidateAll() if the designated constraints aren't met.
type StringFieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StringFieldMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StringFieldMultiError) AllErrors() []error { return m }

// StringFieldValidationError is the validation error returned by
// StringField.Validate if the designated constraints aren't met.
type StringFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringFieldValidationError) ErrorName() string { return "StringFieldValidationError" }

// Error satisfies the builtin error interface
func (e StringFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringFieldValidationError{}
