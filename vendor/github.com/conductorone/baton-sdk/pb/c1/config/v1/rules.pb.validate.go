// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: c1/config/v1/rules.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Int64Rules with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Int64Rules) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int64Rules with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Int64RulesMultiError, or
// nil if none found.
func (m *Int64Rules) ValidateAll() error {
	return m.validate(true)
}

func (m *Int64Rules) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ValidateEmpty

	// no validation rules for IsRequired

	if m.Eq != nil {
		// no validation rules for Eq
	}

	if m.Lt != nil {
		// no validation rules for Lt
	}

	if m.Lte != nil {
		// no validation rules for Lte
	}

	if m.Gt != nil {
		// no validation rules for Gt
	}

	if m.Gte != nil {
		// no validation rules for Gte
	}

	if len(errors) > 0 {
		return Int64RulesMultiError(errors)
	}

	return nil
}

// Int64RulesMultiError is an error wrapping multiple validation errors
// returned by Int64Rules.ValidateAll() if the designated constraints aren't met.
type Int64RulesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Int64RulesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Int64RulesMultiError) AllErrors() []error { return m }

// Int64RulesValidationError is the validation error returned by
// Int64Rules.Validate if the designated constraints aren't met.
type Int64RulesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int64RulesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int64RulesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int64RulesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int64RulesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int64RulesValidationError) ErrorName() string { return "Int64RulesValidationError" }

// Error satisfies the builtin error interface
func (e Int64RulesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt64Rules.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int64RulesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int64RulesValidationError{}

// Validate checks the field values on BoolRules with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BoolRules) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BoolRules with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BoolRulesMultiError, or nil
// if none found.
func (m *BoolRules) ValidateAll() error {
	return m.validate(true)
}

func (m *BoolRules) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Eq != nil {
		// no validation rules for Eq
	}

	if len(errors) > 0 {
		return BoolRulesMultiError(errors)
	}

	return nil
}

// BoolRulesMultiError is an error wrapping multiple validation errors returned
// by BoolRules.ValidateAll() if the designated constraints aren't met.
type BoolRulesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BoolRulesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BoolRulesMultiError) AllErrors() []error { return m }

// BoolRulesValidationError is the validation error returned by
// BoolRules.Validate if the designated constraints aren't met.
type BoolRulesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BoolRulesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BoolRulesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BoolRulesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BoolRulesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BoolRulesValidationError) ErrorName() string { return "BoolRulesValidationError" }

// Error satisfies the builtin error interface
func (e BoolRulesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBoolRules.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BoolRulesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BoolRulesValidationError{}

// Validate checks the field values on RepeatedRules with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RepeatedRules) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedRules with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RepeatedRulesMultiError, or
// nil if none found.
func (m *RepeatedRules) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedRules) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Unique

	// no validation rules for ValidateEmpty

	// no validation rules for IsRequired

	switch v := m.ItemRules.(type) {
	case *RepeatedRules_Int64:
		if v == nil {
			err := RepeatedRulesValidationError{
				field:  "ItemRules",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetInt64()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RepeatedRulesValidationError{
						field:  "Int64",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RepeatedRulesValidationError{
						field:  "Int64",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInt64()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RepeatedRulesValidationError{
					field:  "Int64",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RepeatedRules_Bool:
		if v == nil {
			err := RepeatedRulesValidationError{
				field:  "ItemRules",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBool()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RepeatedRulesValidationError{
						field:  "Bool",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RepeatedRulesValidationError{
						field:  "Bool",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBool()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RepeatedRulesValidationError{
					field:  "Bool",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RepeatedRules_String_:
		if v == nil {
			err := RepeatedRulesValidationError{
				field:  "ItemRules",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetString_()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RepeatedRulesValidationError{
						field:  "String_",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RepeatedRulesValidationError{
						field:  "String_",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetString_()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RepeatedRulesValidationError{
					field:  "String_",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if m.MinItems != nil {
		// no validation rules for MinItems
	}

	if m.MaxItems != nil {
		// no validation rules for MaxItems
	}

	if len(errors) > 0 {
		return RepeatedRulesMultiError(errors)
	}

	return nil
}

// RepeatedRulesMultiError is an error wrapping multiple validation errors
// returned by RepeatedRules.ValidateAll() if the designated constraints
// aren't met.
type RepeatedRulesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RepeatedRulesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RepeatedRulesMultiError) AllErrors() []error { return m }

// RepeatedRulesValidationError is the validation error returned by
// RepeatedRules.Validate if the designated constraints aren't met.
type RepeatedRulesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedRulesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedRulesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedRulesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedRulesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedRulesValidationError) ErrorName() string { return "RepeatedRulesValidationError" }

// Error satisfies the builtin error interface
func (e RepeatedRulesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedRules.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedRulesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedRulesValidationError{}

// Validate checks the field values on RepeatedStringRules with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RepeatedStringRules) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedStringRules with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RepeatedStringRulesMultiError, or nil if none found.
func (m *RepeatedStringRules) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedStringRules) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Unique

	if all {
		switch v := interface{}(m.GetItemRules()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RepeatedStringRulesValidationError{
					field:  "ItemRules",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RepeatedStringRulesValidationError{
					field:  "ItemRules",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItemRules()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RepeatedStringRulesValidationError{
				field:  "ItemRules",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ValidateEmpty

	// no validation rules for IsRequired

	if m.MinItems != nil {
		// no validation rules for MinItems
	}

	if m.MaxItems != nil {
		// no validation rules for MaxItems
	}

	if len(errors) > 0 {
		return RepeatedStringRulesMultiError(errors)
	}

	return nil
}

// RepeatedStringRulesMultiError is an error wrapping multiple validation
// errors returned by RepeatedStringRules.ValidateAll() if the designated
// constraints aren't met.
type RepeatedStringRulesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RepeatedStringRulesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RepeatedStringRulesMultiError) AllErrors() []error { return m }

// RepeatedStringRulesValidationError is the validation error returned by
// RepeatedStringRules.Validate if the designated constraints aren't met.
type RepeatedStringRulesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedStringRulesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedStringRulesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedStringRulesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedStringRulesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedStringRulesValidationError) ErrorName() string {
	return "RepeatedStringRulesValidationError"
}

// Error satisfies the builtin error interface
func (e RepeatedStringRulesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedStringRules.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedStringRulesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedStringRulesValidationError{}

// Validate checks the field values on StringRules with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StringRules) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StringRules with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StringRulesMultiError, or
// nil if none found.
func (m *StringRules) ValidateAll() error {
	return m.validate(true)
}

func (m *StringRules) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WellKnown

	// no validation rules for ValidateEmpty

	// no validation rules for IsRequired

	if m.Eq != nil {
		// no validation rules for Eq
	}

	if m.Len != nil {
		// no validation rules for Len
	}

	if m.MinLen != nil {
		// no validation rules for MinLen
	}

	if m.MaxLen != nil {
		// no validation rules for MaxLen
	}

	if m.Pattern != nil {
		// no validation rules for Pattern
	}

	if m.Prefix != nil {
		// no validation rules for Prefix
	}

	if m.Suffix != nil {
		// no validation rules for Suffix
	}

	if m.Contains != nil {
		// no validation rules for Contains
	}

	if m.NotContains != nil {
		// no validation rules for NotContains
	}

	if len(errors) > 0 {
		return StringRulesMultiError(errors)
	}

	return nil
}

// StringRulesMultiError is an error wrapping multiple validation errors
// returned by StringRules.ValidateAll() if the designated constraints aren't met.
type StringRulesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StringRulesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StringRulesMultiError) AllErrors() []error { return m }

// StringRulesValidationError is the validation error returned by
// StringRules.Validate if the designated constraints aren't met.
type StringRulesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringRulesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringRulesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringRulesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringRulesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringRulesValidationError) ErrorName() string { return "StringRulesValidationError" }

// Error satisfies the builtin error interface
func (e StringRulesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringRules.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringRulesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringRulesValidationError{}

// Validate checks the field values on StringMapRules with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StringMapRules) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StringMapRules with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StringMapRulesMultiError,
// or nil if none found.
func (m *StringMapRules) ValidateAll() error {
	return m.validate(true)
}

func (m *StringMapRules) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ValidateEmpty

	// no validation rules for IsRequired

	if len(errors) > 0 {
		return StringMapRulesMultiError(errors)
	}

	return nil
}

// StringMapRulesMultiError is an error wrapping multiple validation errors
// returned by StringMapRules.ValidateAll() if the designated constraints
// aren't met.
type StringMapRulesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StringMapRulesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StringMapRulesMultiError) AllErrors() []error { return m }

// StringMapRulesValidationError is the validation error returned by
// StringMapRules.Validate if the designated constraints aren't met.
type StringMapRulesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringMapRulesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringMapRulesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringMapRulesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringMapRulesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringMapRulesValidationError) ErrorName() string { return "StringMapRulesValidationError" }

// Error satisfies the builtin error interface
func (e StringMapRulesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringMapRules.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringMapRulesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringMapRulesValidationError{}
