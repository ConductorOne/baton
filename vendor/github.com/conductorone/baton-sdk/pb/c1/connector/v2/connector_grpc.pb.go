// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: c1/connector/v2/connector.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConnectorService_GetMetadata_FullMethodName = "/c1.connector.v2.ConnectorService/GetMetadata"
	ConnectorService_Validate_FullMethodName    = "/c1.connector.v2.ConnectorService/Validate"
	ConnectorService_Cleanup_FullMethodName     = "/c1.connector.v2.ConnectorService/Cleanup"
)

// ConnectorServiceClient is the client API for ConnectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectorServiceClient interface {
	GetMetadata(ctx context.Context, in *ConnectorServiceGetMetadataRequest, opts ...grpc.CallOption) (*ConnectorServiceGetMetadataResponse, error)
	Validate(ctx context.Context, in *ConnectorServiceValidateRequest, opts ...grpc.CallOption) (*ConnectorServiceValidateResponse, error)
	Cleanup(ctx context.Context, in *ConnectorServiceCleanupRequest, opts ...grpc.CallOption) (*ConnectorServiceCleanupResponse, error)
}

type connectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectorServiceClient(cc grpc.ClientConnInterface) ConnectorServiceClient {
	return &connectorServiceClient{cc}
}

func (c *connectorServiceClient) GetMetadata(ctx context.Context, in *ConnectorServiceGetMetadataRequest, opts ...grpc.CallOption) (*ConnectorServiceGetMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectorServiceGetMetadataResponse)
	err := c.cc.Invoke(ctx, ConnectorService_GetMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) Validate(ctx context.Context, in *ConnectorServiceValidateRequest, opts ...grpc.CallOption) (*ConnectorServiceValidateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectorServiceValidateResponse)
	err := c.cc.Invoke(ctx, ConnectorService_Validate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) Cleanup(ctx context.Context, in *ConnectorServiceCleanupRequest, opts ...grpc.CallOption) (*ConnectorServiceCleanupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectorServiceCleanupResponse)
	err := c.cc.Invoke(ctx, ConnectorService_Cleanup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectorServiceServer is the server API for ConnectorService service.
// All implementations should embed UnimplementedConnectorServiceServer
// for forward compatibility.
type ConnectorServiceServer interface {
	GetMetadata(context.Context, *ConnectorServiceGetMetadataRequest) (*ConnectorServiceGetMetadataResponse, error)
	Validate(context.Context, *ConnectorServiceValidateRequest) (*ConnectorServiceValidateResponse, error)
	Cleanup(context.Context, *ConnectorServiceCleanupRequest) (*ConnectorServiceCleanupResponse, error)
}

// UnimplementedConnectorServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConnectorServiceServer struct{}

func (UnimplementedConnectorServiceServer) GetMetadata(context.Context, *ConnectorServiceGetMetadataRequest) (*ConnectorServiceGetMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (UnimplementedConnectorServiceServer) Validate(context.Context, *ConnectorServiceValidateRequest) (*ConnectorServiceValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedConnectorServiceServer) Cleanup(context.Context, *ConnectorServiceCleanupRequest) (*ConnectorServiceCleanupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cleanup not implemented")
}
func (UnimplementedConnectorServiceServer) testEmbeddedByValue() {}

// UnsafeConnectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectorServiceServer will
// result in compilation errors.
type UnsafeConnectorServiceServer interface {
	mustEmbedUnimplementedConnectorServiceServer()
}

func RegisterConnectorServiceServer(s grpc.ServiceRegistrar, srv ConnectorServiceServer) {
	// If the following call pancis, it indicates UnimplementedConnectorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConnectorService_ServiceDesc, srv)
}

func _ConnectorService_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectorServiceGetMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorService_GetMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).GetMetadata(ctx, req.(*ConnectorServiceGetMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectorServiceValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorService_Validate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).Validate(ctx, req.(*ConnectorServiceValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_Cleanup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectorServiceCleanupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).Cleanup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorService_Cleanup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).Cleanup(ctx, req.(*ConnectorServiceCleanupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectorService_ServiceDesc is the grpc.ServiceDesc for ConnectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "c1.connector.v2.ConnectorService",
	HandlerType: (*ConnectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetadata",
			Handler:    _ConnectorService_GetMetadata_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _ConnectorService_Validate_Handler,
		},
		{
			MethodName: "Cleanup",
			Handler:    _ConnectorService_Cleanup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "c1/connector/v2/connector.proto",
}
