// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: c1/connector/v2/connector.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ConnectorMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ConnectorMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectorMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConnectorMetadataMultiError, or nil if none found.
func (m *ConnectorMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectorMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetDisplayName()); l < 1 || l > 1024 {
		err := ConnectorMetadataValidationError{
			field:  "DisplayName",
			reason: "value length must be between 1 and 1024 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetHelpUrl() != "" {

		if l := len(m.GetHelpUrl()); l < 1 || l > 1024 {
			err := ConnectorMetadataValidationError{
				field:  "HelpUrl",
				reason: "value length must be between 1 and 1024 bytes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !strings.HasPrefix(m.GetHelpUrl(), "https://") {
			err := ConnectorMetadataValidationError{
				field:  "HelpUrl",
				reason: "value does not have prefix \"https://\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if uri, err := url.Parse(m.GetHelpUrl()); err != nil {
			err = ConnectorMetadataValidationError{
				field:  "HelpUrl",
				reason: "value must be a valid URI",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else if !uri.IsAbs() {
			err := ConnectorMetadataValidationError{
				field:  "HelpUrl",
				reason: "value must be absolute",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if all {
		switch v := interface{}(m.GetIcon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConnectorMetadataValidationError{
					field:  "Icon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConnectorMetadataValidationError{
					field:  "Icon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIcon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConnectorMetadataValidationError{
				field:  "Icon",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLogo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConnectorMetadataValidationError{
					field:  "Logo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConnectorMetadataValidationError{
					field:  "Logo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLogo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConnectorMetadataValidationError{
				field:  "Logo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConnectorMetadataValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConnectorMetadataValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConnectorMetadataValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConnectorMetadataValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConnectorMetadataValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConnectorMetadataValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetDescription() != "" {

		if l := len(m.GetDescription()); l < 1 || l > 4096 {
			err := ConnectorMetadataValidationError{
				field:  "Description",
				reason: "value length must be between 1 and 4096 bytes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if all {
		switch v := interface{}(m.GetCapabilities()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConnectorMetadataValidationError{
					field:  "Capabilities",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConnectorMetadataValidationError{
					field:  "Capabilities",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCapabilities()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConnectorMetadataValidationError{
				field:  "Capabilities",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConnectorMetadataMultiError(errors)
	}

	return nil
}

// ConnectorMetadataMultiError is an error wrapping multiple validation errors
// returned by ConnectorMetadata.ValidateAll() if the designated constraints
// aren't met.
type ConnectorMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectorMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectorMetadataMultiError) AllErrors() []error { return m }

// ConnectorMetadataValidationError is the validation error returned by
// ConnectorMetadata.Validate if the designated constraints aren't met.
type ConnectorMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectorMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectorMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectorMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectorMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectorMetadataValidationError) ErrorName() string {
	return "ConnectorMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e ConnectorMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectorMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectorMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectorMetadataValidationError{}

// Validate checks the field values on ConnectorCapabilities with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConnectorCapabilities) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectorCapabilities with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConnectorCapabilitiesMultiError, or nil if none found.
func (m *ConnectorCapabilities) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectorCapabilities) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResourceTypeCapabilities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConnectorCapabilitiesValidationError{
						field:  fmt.Sprintf("ResourceTypeCapabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConnectorCapabilitiesValidationError{
						field:  fmt.Sprintf("ResourceTypeCapabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConnectorCapabilitiesValidationError{
					field:  fmt.Sprintf("ResourceTypeCapabilities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConnectorCapabilitiesMultiError(errors)
	}

	return nil
}

// ConnectorCapabilitiesMultiError is an error wrapping multiple validation
// errors returned by ConnectorCapabilities.ValidateAll() if the designated
// constraints aren't met.
type ConnectorCapabilitiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectorCapabilitiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectorCapabilitiesMultiError) AllErrors() []error { return m }

// ConnectorCapabilitiesValidationError is the validation error returned by
// ConnectorCapabilities.Validate if the designated constraints aren't met.
type ConnectorCapabilitiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectorCapabilitiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectorCapabilitiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectorCapabilitiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectorCapabilitiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectorCapabilitiesValidationError) ErrorName() string {
	return "ConnectorCapabilitiesValidationError"
}

// Error satisfies the builtin error interface
func (e ConnectorCapabilitiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectorCapabilities.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectorCapabilitiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectorCapabilitiesValidationError{}

// Validate checks the field values on ResourceTypeCapability with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceTypeCapability) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceTypeCapability with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceTypeCapabilityMultiError, or nil if none found.
func (m *ResourceTypeCapability) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceTypeCapability) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResourceType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceTypeCapabilityValidationError{
					field:  "ResourceType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceTypeCapabilityValidationError{
					field:  "ResourceType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceTypeCapabilityValidationError{
				field:  "ResourceType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResourceTypeCapabilityMultiError(errors)
	}

	return nil
}

// ResourceTypeCapabilityMultiError is an error wrapping multiple validation
// errors returned by ResourceTypeCapability.ValidateAll() if the designated
// constraints aren't met.
type ResourceTypeCapabilityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceTypeCapabilityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceTypeCapabilityMultiError) AllErrors() []error { return m }

// ResourceTypeCapabilityValidationError is the validation error returned by
// ResourceTypeCapability.Validate if the designated constraints aren't met.
type ResourceTypeCapabilityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceTypeCapabilityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceTypeCapabilityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceTypeCapabilityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceTypeCapabilityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceTypeCapabilityValidationError) ErrorName() string {
	return "ResourceTypeCapabilityValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceTypeCapabilityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceTypeCapability.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceTypeCapabilityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceTypeCapabilityValidationError{}

// Validate checks the field values on ConnectorServiceGetMetadataRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ConnectorServiceGetMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectorServiceGetMetadataRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ConnectorServiceGetMetadataRequestMultiError, or nil if none found.
func (m *ConnectorServiceGetMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectorServiceGetMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConnectorServiceGetMetadataRequestMultiError(errors)
	}

	return nil
}

// ConnectorServiceGetMetadataRequestMultiError is an error wrapping multiple
// validation errors returned by
// ConnectorServiceGetMetadataRequest.ValidateAll() if the designated
// constraints aren't met.
type ConnectorServiceGetMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectorServiceGetMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectorServiceGetMetadataRequestMultiError) AllErrors() []error { return m }

// ConnectorServiceGetMetadataRequestValidationError is the validation error
// returned by ConnectorServiceGetMetadataRequest.Validate if the designated
// constraints aren't met.
type ConnectorServiceGetMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectorServiceGetMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectorServiceGetMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectorServiceGetMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectorServiceGetMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectorServiceGetMetadataRequestValidationError) ErrorName() string {
	return "ConnectorServiceGetMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConnectorServiceGetMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectorServiceGetMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectorServiceGetMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectorServiceGetMetadataRequestValidationError{}

// Validate checks the field values on ConnectorServiceGetMetadataResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ConnectorServiceGetMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectorServiceGetMetadataResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ConnectorServiceGetMetadataResponseMultiError, or nil if none found.
func (m *ConnectorServiceGetMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectorServiceGetMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConnectorServiceGetMetadataResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConnectorServiceGetMetadataResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConnectorServiceGetMetadataResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConnectorServiceGetMetadataResponseMultiError(errors)
	}

	return nil
}

// ConnectorServiceGetMetadataResponseMultiError is an error wrapping multiple
// validation errors returned by
// ConnectorServiceGetMetadataResponse.ValidateAll() if the designated
// constraints aren't met.
type ConnectorServiceGetMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectorServiceGetMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectorServiceGetMetadataResponseMultiError) AllErrors() []error { return m }

// ConnectorServiceGetMetadataResponseValidationError is the validation error
// returned by ConnectorServiceGetMetadataResponse.Validate if the designated
// constraints aren't met.
type ConnectorServiceGetMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectorServiceGetMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectorServiceGetMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectorServiceGetMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectorServiceGetMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectorServiceGetMetadataResponseValidationError) ErrorName() string {
	return "ConnectorServiceGetMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConnectorServiceGetMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectorServiceGetMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectorServiceGetMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectorServiceGetMetadataResponseValidationError{}

// Validate checks the field values on ConnectorServiceValidateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConnectorServiceValidateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectorServiceValidateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ConnectorServiceValidateRequestMultiError, or nil if none found.
func (m *ConnectorServiceValidateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectorServiceValidateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConnectorServiceValidateRequestMultiError(errors)
	}

	return nil
}

// ConnectorServiceValidateRequestMultiError is an error wrapping multiple
// validation errors returned by ConnectorServiceValidateRequest.ValidateAll()
// if the designated constraints aren't met.
type ConnectorServiceValidateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectorServiceValidateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectorServiceValidateRequestMultiError) AllErrors() []error { return m }

// ConnectorServiceValidateRequestValidationError is the validation error
// returned by ConnectorServiceValidateRequest.Validate if the designated
// constraints aren't met.
type ConnectorServiceValidateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectorServiceValidateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectorServiceValidateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectorServiceValidateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectorServiceValidateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectorServiceValidateRequestValidationError) ErrorName() string {
	return "ConnectorServiceValidateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConnectorServiceValidateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectorServiceValidateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectorServiceValidateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectorServiceValidateRequestValidationError{}

// Validate checks the field values on ConnectorServiceValidateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ConnectorServiceValidateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectorServiceValidateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ConnectorServiceValidateResponseMultiError, or nil if none found.
func (m *ConnectorServiceValidateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectorServiceValidateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConnectorServiceValidateResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConnectorServiceValidateResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConnectorServiceValidateResponseValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConnectorServiceValidateResponseMultiError(errors)
	}

	return nil
}

// ConnectorServiceValidateResponseMultiError is an error wrapping multiple
// validation errors returned by
// ConnectorServiceValidateResponse.ValidateAll() if the designated
// constraints aren't met.
type ConnectorServiceValidateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectorServiceValidateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectorServiceValidateResponseMultiError) AllErrors() []error { return m }

// ConnectorServiceValidateResponseValidationError is the validation error
// returned by ConnectorServiceValidateResponse.Validate if the designated
// constraints aren't met.
type ConnectorServiceValidateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectorServiceValidateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectorServiceValidateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectorServiceValidateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectorServiceValidateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectorServiceValidateResponseValidationError) ErrorName() string {
	return "ConnectorServiceValidateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConnectorServiceValidateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectorServiceValidateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectorServiceValidateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectorServiceValidateResponseValidationError{}
