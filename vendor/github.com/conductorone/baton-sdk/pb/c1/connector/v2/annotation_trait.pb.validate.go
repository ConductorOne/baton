// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: c1/connector/v2/annotation_trait.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserTrait with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserTrait) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserTrait with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserTraitMultiError, or nil
// if none found.
func (m *UserTrait) ValidateAll() error {
	return m.validate(true)
}

func (m *UserTrait) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEmails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserTraitValidationError{
						field:  fmt.Sprintf("Emails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserTraitValidationError{
						field:  fmt.Sprintf("Emails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserTraitValidationError{
					field:  fmt.Sprintf("Emails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetStatus() == nil {
		err := UserTraitValidationError{
			field:  "Status",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserTraitValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserTraitValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserTraitValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserTraitValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserTraitValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserTraitValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIcon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserTraitValidationError{
					field:  "Icon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserTraitValidationError{
					field:  "Icon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIcon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserTraitValidationError{
				field:  "Icon",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := UserTrait_AccountType_name[int32(m.GetAccountType())]; !ok {
		err := UserTraitValidationError{
			field:  "AccountType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Login

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserTraitValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserTraitValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserTraitValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastLogin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserTraitValidationError{
					field:  "LastLogin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserTraitValidationError{
					field:  "LastLogin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastLogin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserTraitValidationError{
				field:  "LastLogin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMfaStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserTraitValidationError{
					field:  "MfaStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserTraitValidationError{
					field:  "MfaStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMfaStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserTraitValidationError{
				field:  "MfaStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSsoStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserTraitValidationError{
					field:  "SsoStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserTraitValidationError{
					field:  "SsoStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSsoStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserTraitValidationError{
				field:  "SsoStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserTraitMultiError(errors)
	}

	return nil
}

// UserTraitMultiError is an error wrapping multiple validation errors returned
// by UserTrait.ValidateAll() if the designated constraints aren't met.
type UserTraitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserTraitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserTraitMultiError) AllErrors() []error { return m }

// UserTraitValidationError is the validation error returned by
// UserTrait.Validate if the designated constraints aren't met.
type UserTraitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserTraitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserTraitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserTraitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserTraitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserTraitValidationError) ErrorName() string { return "UserTraitValidationError" }

// Error satisfies the builtin error interface
func (e UserTraitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserTrait.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserTraitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserTraitValidationError{}

// Validate checks the field values on GroupTrait with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GroupTrait) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupTrait with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GroupTraitMultiError, or
// nil if none found.
func (m *GroupTrait) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupTrait) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIcon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GroupTraitValidationError{
					field:  "Icon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GroupTraitValidationError{
					field:  "Icon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIcon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GroupTraitValidationError{
				field:  "Icon",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GroupTraitValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GroupTraitValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GroupTraitValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GroupTraitMultiError(errors)
	}

	return nil
}

// GroupTraitMultiError is an error wrapping multiple validation errors
// returned by GroupTrait.ValidateAll() if the designated constraints aren't met.
type GroupTraitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupTraitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupTraitMultiError) AllErrors() []error { return m }

// GroupTraitValidationError is the validation error returned by
// GroupTrait.Validate if the designated constraints aren't met.
type GroupTraitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupTraitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupTraitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupTraitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupTraitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupTraitValidationError) ErrorName() string { return "GroupTraitValidationError" }

// Error satisfies the builtin error interface
func (e GroupTraitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupTrait.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupTraitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupTraitValidationError{}

// Validate checks the field values on RoleTrait with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleTrait) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleTrait with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleTraitMultiError, or nil
// if none found.
func (m *RoleTrait) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleTrait) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoleTraitValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoleTraitValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoleTraitValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RoleTraitMultiError(errors)
	}

	return nil
}

// RoleTraitMultiError is an error wrapping multiple validation errors returned
// by RoleTrait.ValidateAll() if the designated constraints aren't met.
type RoleTraitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleTraitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleTraitMultiError) AllErrors() []error { return m }

// RoleTraitValidationError is the validation error returned by
// RoleTrait.Validate if the designated constraints aren't met.
type RoleTraitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleTraitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleTraitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleTraitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleTraitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleTraitValidationError) ErrorName() string { return "RoleTraitValidationError" }

// Error satisfies the builtin error interface
func (e RoleTraitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleTrait.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleTraitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleTraitValidationError{}

// Validate checks the field values on AppTrait with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppTrait) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppTrait with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppTraitMultiError, or nil
// if none found.
func (m *AppTrait) ValidateAll() error {
	return m.validate(true)
}

func (m *AppTrait) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetHelpUrl() != "" {

		if l := len(m.GetHelpUrl()); l < 1 || l > 1024 {
			err := AppTraitValidationError{
				field:  "HelpUrl",
				reason: "value length must be between 1 and 1024 bytes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !strings.HasPrefix(m.GetHelpUrl(), "https://") {
			err := AppTraitValidationError{
				field:  "HelpUrl",
				reason: "value does not have prefix \"https://\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if uri, err := url.Parse(m.GetHelpUrl()); err != nil {
			err = AppTraitValidationError{
				field:  "HelpUrl",
				reason: "value must be a valid URI",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else if !uri.IsAbs() {
			err := AppTraitValidationError{
				field:  "HelpUrl",
				reason: "value must be absolute",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if all {
		switch v := interface{}(m.GetIcon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppTraitValidationError{
					field:  "Icon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppTraitValidationError{
					field:  "Icon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIcon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppTraitValidationError{
				field:  "Icon",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLogo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppTraitValidationError{
					field:  "Logo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppTraitValidationError{
					field:  "Logo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLogo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppTraitValidationError{
				field:  "Logo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppTraitValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppTraitValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppTraitValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AppTraitMultiError(errors)
	}

	return nil
}

// AppTraitMultiError is an error wrapping multiple validation errors returned
// by AppTrait.ValidateAll() if the designated constraints aren't met.
type AppTraitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppTraitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppTraitMultiError) AllErrors() []error { return m }

// AppTraitValidationError is the validation error returned by
// AppTrait.Validate if the designated constraints aren't met.
type AppTraitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppTraitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppTraitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppTraitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppTraitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppTraitValidationError) ErrorName() string { return "AppTraitValidationError" }

// Error satisfies the builtin error interface
func (e AppTraitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppTrait.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppTraitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppTraitValidationError{}

// Validate checks the field values on UserTrait_Email with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserTrait_Email) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserTrait_Email with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserTrait_EmailMultiError, or nil if none found.
func (m *UserTrait_Email) ValidateAll() error {
	return m.validate(true)
}

func (m *UserTrait_Email) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetAddress()); err != nil {
		err = UserTrait_EmailValidationError{
			field:  "Address",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsPrimary

	if len(errors) > 0 {
		return UserTrait_EmailMultiError(errors)
	}

	return nil
}

func (m *UserTrait_Email) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UserTrait_Email) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UserTrait_EmailMultiError is an error wrapping multiple validation errors
// returned by UserTrait_Email.ValidateAll() if the designated constraints
// aren't met.
type UserTrait_EmailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserTrait_EmailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserTrait_EmailMultiError) AllErrors() []error { return m }

// UserTrait_EmailValidationError is the validation error returned by
// UserTrait_Email.Validate if the designated constraints aren't met.
type UserTrait_EmailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserTrait_EmailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserTrait_EmailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserTrait_EmailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserTrait_EmailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserTrait_EmailValidationError) ErrorName() string { return "UserTrait_EmailValidationError" }

// Error satisfies the builtin error interface
func (e UserTrait_EmailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserTrait_Email.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserTrait_EmailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserTrait_EmailValidationError{}

// Validate checks the field values on UserTrait_Status with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserTrait_Status) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserTrait_Status with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserTrait_StatusMultiError, or nil if none found.
func (m *UserTrait_Status) ValidateAll() error {
	return m.validate(true)
}

func (m *UserTrait_Status) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := UserTrait_Status_Status_name[int32(m.GetStatus())]; !ok {
		err := UserTrait_StatusValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDetails() != "" {

		if l := len(m.GetDetails()); l < 1 || l > 1024 {
			err := UserTrait_StatusValidationError{
				field:  "Details",
				reason: "value length must be between 1 and 1024 bytes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UserTrait_StatusMultiError(errors)
	}

	return nil
}

// UserTrait_StatusMultiError is an error wrapping multiple validation errors
// returned by UserTrait_Status.ValidateAll() if the designated constraints
// aren't met.
type UserTrait_StatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserTrait_StatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserTrait_StatusMultiError) AllErrors() []error { return m }

// UserTrait_StatusValidationError is the validation error returned by
// UserTrait_Status.Validate if the designated constraints aren't met.
type UserTrait_StatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserTrait_StatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserTrait_StatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserTrait_StatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserTrait_StatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserTrait_StatusValidationError) ErrorName() string { return "UserTrait_StatusValidationError" }

// Error satisfies the builtin error interface
func (e UserTrait_StatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserTrait_Status.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserTrait_StatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserTrait_StatusValidationError{}

// Validate checks the field values on UserTrait_MFAStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserTrait_MFAStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserTrait_MFAStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserTrait_MFAStatusMultiError, or nil if none found.
func (m *UserTrait_MFAStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *UserTrait_MFAStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MfaEnabled

	if len(errors) > 0 {
		return UserTrait_MFAStatusMultiError(errors)
	}

	return nil
}

// UserTrait_MFAStatusMultiError is an error wrapping multiple validation
// errors returned by UserTrait_MFAStatus.ValidateAll() if the designated
// constraints aren't met.
type UserTrait_MFAStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserTrait_MFAStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserTrait_MFAStatusMultiError) AllErrors() []error { return m }

// UserTrait_MFAStatusValidationError is the validation error returned by
// UserTrait_MFAStatus.Validate if the designated constraints aren't met.
type UserTrait_MFAStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserTrait_MFAStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserTrait_MFAStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserTrait_MFAStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserTrait_MFAStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserTrait_MFAStatusValidationError) ErrorName() string {
	return "UserTrait_MFAStatusValidationError"
}

// Error satisfies the builtin error interface
func (e UserTrait_MFAStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserTrait_MFAStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserTrait_MFAStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserTrait_MFAStatusValidationError{}

// Validate checks the field values on UserTrait_SSOStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserTrait_SSOStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserTrait_SSOStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserTrait_SSOStatusMultiError, or nil if none found.
func (m *UserTrait_SSOStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *UserTrait_SSOStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SsoEnabled

	if len(errors) > 0 {
		return UserTrait_SSOStatusMultiError(errors)
	}

	return nil
}

// UserTrait_SSOStatusMultiError is an error wrapping multiple validation
// errors returned by UserTrait_SSOStatus.ValidateAll() if the designated
// constraints aren't met.
type UserTrait_SSOStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserTrait_SSOStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserTrait_SSOStatusMultiError) AllErrors() []error { return m }

// UserTrait_SSOStatusValidationError is the validation error returned by
// UserTrait_SSOStatus.Validate if the designated constraints aren't met.
type UserTrait_SSOStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserTrait_SSOStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserTrait_SSOStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserTrait_SSOStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserTrait_SSOStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserTrait_SSOStatusValidationError) ErrorName() string {
	return "UserTrait_SSOStatusValidationError"
}

// Error satisfies the builtin error interface
func (e UserTrait_SSOStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserTrait_SSOStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserTrait_SSOStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserTrait_SSOStatusValidationError{}
