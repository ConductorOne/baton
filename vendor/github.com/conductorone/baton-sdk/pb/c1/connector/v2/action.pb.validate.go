// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: c1/connector/v2/action.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BatonActionSchema with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BatonActionSchema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatonActionSchema with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatonActionSchemaMultiError, or nil if none found.
func (m *BatonActionSchema) ValidateAll() error {
	return m.validate(true)
}

func (m *BatonActionSchema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetArguments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatonActionSchemaValidationError{
						field:  fmt.Sprintf("Arguments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatonActionSchemaValidationError{
						field:  fmt.Sprintf("Arguments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatonActionSchemaValidationError{
					field:  fmt.Sprintf("Arguments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetConstraints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatonActionSchemaValidationError{
						field:  fmt.Sprintf("Constraints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatonActionSchemaValidationError{
						field:  fmt.Sprintf("Constraints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatonActionSchemaValidationError{
					field:  fmt.Sprintf("Constraints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetReturnTypes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatonActionSchemaValidationError{
						field:  fmt.Sprintf("ReturnTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatonActionSchemaValidationError{
						field:  fmt.Sprintf("ReturnTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatonActionSchemaValidationError{
					field:  fmt.Sprintf("ReturnTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for DisplayName

	// no validation rules for Description

	if len(errors) > 0 {
		return BatonActionSchemaMultiError(errors)
	}

	return nil
}

// BatonActionSchemaMultiError is an error wrapping multiple validation errors
// returned by BatonActionSchema.ValidateAll() if the designated constraints
// aren't met.
type BatonActionSchemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatonActionSchemaMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatonActionSchemaMultiError) AllErrors() []error { return m }

// BatonActionSchemaValidationError is the validation error returned by
// BatonActionSchema.Validate if the designated constraints aren't met.
type BatonActionSchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatonActionSchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatonActionSchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatonActionSchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatonActionSchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatonActionSchemaValidationError) ErrorName() string {
	return "BatonActionSchemaValidationError"
}

// Error satisfies the builtin error interface
func (e BatonActionSchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatonActionSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatonActionSchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatonActionSchemaValidationError{}

// Validate checks the field values on InvokeActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InvokeActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvokeActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InvokeActionRequestMultiError, or nil if none found.
func (m *InvokeActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InvokeActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetArgs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InvokeActionRequestValidationError{
					field:  "Args",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InvokeActionRequestValidationError{
					field:  "Args",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArgs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InvokeActionRequestValidationError{
				field:  "Args",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InvokeActionRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InvokeActionRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InvokeActionRequestValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InvokeActionRequestMultiError(errors)
	}

	return nil
}

// InvokeActionRequestMultiError is an error wrapping multiple validation
// errors returned by InvokeActionRequest.ValidateAll() if the designated
// constraints aren't met.
type InvokeActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvokeActionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvokeActionRequestMultiError) AllErrors() []error { return m }

// InvokeActionRequestValidationError is the validation error returned by
// InvokeActionRequest.Validate if the designated constraints aren't met.
type InvokeActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvokeActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvokeActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvokeActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvokeActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvokeActionRequestValidationError) ErrorName() string {
	return "InvokeActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InvokeActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvokeActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvokeActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvokeActionRequestValidationError{}

// Validate checks the field values on InvokeActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InvokeActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvokeActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InvokeActionResponseMultiError, or nil if none found.
func (m *InvokeActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InvokeActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InvokeActionResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InvokeActionResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InvokeActionResponseValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InvokeActionResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InvokeActionResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InvokeActionResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	if len(errors) > 0 {
		return InvokeActionResponseMultiError(errors)
	}

	return nil
}

// InvokeActionResponseMultiError is an error wrapping multiple validation
// errors returned by InvokeActionResponse.ValidateAll() if the designated
// constraints aren't met.
type InvokeActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvokeActionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvokeActionResponseMultiError) AllErrors() []error { return m }

// InvokeActionResponseValidationError is the validation error returned by
// InvokeActionResponse.Validate if the designated constraints aren't met.
type InvokeActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvokeActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvokeActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvokeActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvokeActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvokeActionResponseValidationError) ErrorName() string {
	return "InvokeActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InvokeActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvokeActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvokeActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvokeActionResponseValidationError{}

// Validate checks the field values on GetActionStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetActionStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActionStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActionStatusRequestMultiError, or nil if none found.
func (m *GetActionStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActionStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Id

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetActionStatusRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetActionStatusRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetActionStatusRequestValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetActionStatusRequestMultiError(errors)
	}

	return nil
}

// GetActionStatusRequestMultiError is an error wrapping multiple validation
// errors returned by GetActionStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type GetActionStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActionStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActionStatusRequestMultiError) AllErrors() []error { return m }

// GetActionStatusRequestValidationError is the validation error returned by
// GetActionStatusRequest.Validate if the designated constraints aren't met.
type GetActionStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActionStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActionStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActionStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActionStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActionStatusRequestValidationError) ErrorName() string {
	return "GetActionStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetActionStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActionStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActionStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActionStatusRequestValidationError{}

// Validate checks the field values on GetActionStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetActionStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActionStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActionStatusResponseMultiError, or nil if none found.
func (m *GetActionStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActionStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Id

	// no validation rules for Status

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetActionStatusResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetActionStatusResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetActionStatusResponseValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetActionStatusResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetActionStatusResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetActionStatusResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetActionStatusResponseMultiError(errors)
	}

	return nil
}

// GetActionStatusResponseMultiError is an error wrapping multiple validation
// errors returned by GetActionStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type GetActionStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActionStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActionStatusResponseMultiError) AllErrors() []error { return m }

// GetActionStatusResponseValidationError is the validation error returned by
// GetActionStatusResponse.Validate if the designated constraints aren't met.
type GetActionStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActionStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActionStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActionStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActionStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActionStatusResponseValidationError) ErrorName() string {
	return "GetActionStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetActionStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActionStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActionStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActionStatusResponseValidationError{}

// Validate checks the field values on GetActionSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetActionSchemaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActionSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActionSchemaRequestMultiError, or nil if none found.
func (m *GetActionSchemaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActionSchemaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetActionSchemaRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetActionSchemaRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetActionSchemaRequestValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetActionSchemaRequestMultiError(errors)
	}

	return nil
}

// GetActionSchemaRequestMultiError is an error wrapping multiple validation
// errors returned by GetActionSchemaRequest.ValidateAll() if the designated
// constraints aren't met.
type GetActionSchemaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActionSchemaRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActionSchemaRequestMultiError) AllErrors() []error { return m }

// GetActionSchemaRequestValidationError is the validation error returned by
// GetActionSchemaRequest.Validate if the designated constraints aren't met.
type GetActionSchemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActionSchemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActionSchemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActionSchemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActionSchemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActionSchemaRequestValidationError) ErrorName() string {
	return "GetActionSchemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetActionSchemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActionSchemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActionSchemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActionSchemaRequestValidationError{}

// Validate checks the field values on GetActionSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetActionSchemaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActionSchemaResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActionSchemaResponseMultiError, or nil if none found.
func (m *GetActionSchemaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActionSchemaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetActionSchemaResponseValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetActionSchemaResponseValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetActionSchemaResponseValidationError{
				field:  "Schema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetActionSchemaResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetActionSchemaResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetActionSchemaResponseValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetActionSchemaResponseMultiError(errors)
	}

	return nil
}

// GetActionSchemaResponseMultiError is an error wrapping multiple validation
// errors returned by GetActionSchemaResponse.ValidateAll() if the designated
// constraints aren't met.
type GetActionSchemaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActionSchemaResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActionSchemaResponseMultiError) AllErrors() []error { return m }

// GetActionSchemaResponseValidationError is the validation error returned by
// GetActionSchemaResponse.Validate if the designated constraints aren't met.
type GetActionSchemaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActionSchemaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActionSchemaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActionSchemaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActionSchemaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActionSchemaResponseValidationError) ErrorName() string {
	return "GetActionSchemaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetActionSchemaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActionSchemaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActionSchemaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActionSchemaResponseValidationError{}

// Validate checks the field values on ListActionSchemasRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListActionSchemasRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListActionSchemasRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListActionSchemasRequestMultiError, or nil if none found.
func (m *ListActionSchemasRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListActionSchemasRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListActionSchemasRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListActionSchemasRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListActionSchemasRequestValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListActionSchemasRequestMultiError(errors)
	}

	return nil
}

// ListActionSchemasRequestMultiError is an error wrapping multiple validation
// errors returned by ListActionSchemasRequest.ValidateAll() if the designated
// constraints aren't met.
type ListActionSchemasRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListActionSchemasRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListActionSchemasRequestMultiError) AllErrors() []error { return m }

// ListActionSchemasRequestValidationError is the validation error returned by
// ListActionSchemasRequest.Validate if the designated constraints aren't met.
type ListActionSchemasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListActionSchemasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListActionSchemasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListActionSchemasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListActionSchemasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListActionSchemasRequestValidationError) ErrorName() string {
	return "ListActionSchemasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListActionSchemasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListActionSchemasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListActionSchemasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListActionSchemasRequestValidationError{}

// Validate checks the field values on ListActionSchemasResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListActionSchemasResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListActionSchemasResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListActionSchemasResponseMultiError, or nil if none found.
func (m *ListActionSchemasResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListActionSchemasResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSchemas() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListActionSchemasResponseValidationError{
						field:  fmt.Sprintf("Schemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListActionSchemasResponseValidationError{
						field:  fmt.Sprintf("Schemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListActionSchemasResponseValidationError{
					field:  fmt.Sprintf("Schemas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListActionSchemasResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListActionSchemasResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListActionSchemasResponseValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListActionSchemasResponseMultiError(errors)
	}

	return nil
}

// ListActionSchemasResponseMultiError is an error wrapping multiple validation
// errors returned by ListActionSchemasResponse.ValidateAll() if the
// designated constraints aren't met.
type ListActionSchemasResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListActionSchemasResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListActionSchemasResponseMultiError) AllErrors() []error { return m }

// ListActionSchemasResponseValidationError is the validation error returned by
// ListActionSchemasResponse.Validate if the designated constraints aren't met.
type ListActionSchemasResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListActionSchemasResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListActionSchemasResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListActionSchemasResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListActionSchemasResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListActionSchemasResponseValidationError) ErrorName() string {
	return "ListActionSchemasResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListActionSchemasResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListActionSchemasResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListActionSchemasResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListActionSchemasResponseValidationError{}
