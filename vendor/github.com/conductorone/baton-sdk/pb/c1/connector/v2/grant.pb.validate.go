// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: c1/connector/v2/grant.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GrantSources with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GrantSources) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantSources with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GrantSourcesMultiError, or
// nil if none found.
func (m *GrantSources) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantSources) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetSources()))
		i := 0
		for key := range m.GetSources() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetSources()[key]
			_ = val

			// no validation rules for Sources[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GrantSourcesValidationError{
							field:  fmt.Sprintf("Sources[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GrantSourcesValidationError{
							field:  fmt.Sprintf("Sources[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GrantSourcesValidationError{
						field:  fmt.Sprintf("Sources[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GrantSourcesMultiError(errors)
	}

	return nil
}

// GrantSourcesMultiError is an error wrapping multiple validation errors
// returned by GrantSources.ValidateAll() if the designated constraints aren't met.
type GrantSourcesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantSourcesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantSourcesMultiError) AllErrors() []error { return m }

// GrantSourcesValidationError is the validation error returned by
// GrantSources.Validate if the designated constraints aren't met.
type GrantSourcesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantSourcesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantSourcesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantSourcesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantSourcesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantSourcesValidationError) ErrorName() string { return "GrantSourcesValidationError" }

// Error satisfies the builtin error interface
func (e GrantSourcesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantSources.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantSourcesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantSourcesValidationError{}

// Validate checks the field values on Grant with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Grant) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Grant with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GrantMultiError, or nil if none found.
func (m *Grant) ValidateAll() error {
	return m.validate(true)
}

func (m *Grant) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEntitlement() == nil {
		err := GrantValidationError{
			field:  "Entitlement",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEntitlement()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GrantValidationError{
					field:  "Entitlement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GrantValidationError{
					field:  "Entitlement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntitlement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GrantValidationError{
				field:  "Entitlement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPrincipal() == nil {
		err := GrantValidationError{
			field:  "Principal",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPrincipal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GrantValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GrantValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrincipal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GrantValidationError{
				field:  "Principal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetId()); l < 1 || l > 1024 {
		err := GrantValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 1024 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GrantValidationError{
					field:  "Sources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GrantValidationError{
					field:  "Sources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GrantValidationError{
				field:  "Sources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GrantValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GrantValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GrantValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GrantMultiError(errors)
	}

	return nil
}

// GrantMultiError is an error wrapping multiple validation errors returned by
// Grant.ValidateAll() if the designated constraints aren't met.
type GrantMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantMultiError) AllErrors() []error { return m }

// GrantValidationError is the validation error returned by Grant.Validate if
// the designated constraints aren't met.
type GrantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantValidationError) ErrorName() string { return "GrantValidationError" }

// Error satisfies the builtin error interface
func (e GrantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantValidationError{}

// Validate checks the field values on GrantsServiceListGrantsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GrantsServiceListGrantsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantsServiceListGrantsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GrantsServiceListGrantsRequestMultiError, or nil if none found.
func (m *GrantsServiceListGrantsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantsServiceListGrantsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResource() == nil {
		err := GrantsServiceListGrantsRequestValidationError{
			field:  "Resource",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GrantsServiceListGrantsRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GrantsServiceListGrantsRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GrantsServiceListGrantsRequestValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 250 {
			err := GrantsServiceListGrantsRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 250",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPageToken() != "" {

		if l := len(m.GetPageToken()); l < 1 || l > 4096 {
			err := GrantsServiceListGrantsRequestValidationError{
				field:  "PageToken",
				reason: "value length must be between 1 and 4096 bytes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GrantsServiceListGrantsRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GrantsServiceListGrantsRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GrantsServiceListGrantsRequestValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GrantsServiceListGrantsRequestMultiError(errors)
	}

	return nil
}

// GrantsServiceListGrantsRequestMultiError is an error wrapping multiple
// validation errors returned by GrantsServiceListGrantsRequest.ValidateAll()
// if the designated constraints aren't met.
type GrantsServiceListGrantsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantsServiceListGrantsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantsServiceListGrantsRequestMultiError) AllErrors() []error { return m }

// GrantsServiceListGrantsRequestValidationError is the validation error
// returned by GrantsServiceListGrantsRequest.Validate if the designated
// constraints aren't met.
type GrantsServiceListGrantsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantsServiceListGrantsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantsServiceListGrantsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantsServiceListGrantsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantsServiceListGrantsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantsServiceListGrantsRequestValidationError) ErrorName() string {
	return "GrantsServiceListGrantsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GrantsServiceListGrantsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantsServiceListGrantsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantsServiceListGrantsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantsServiceListGrantsRequestValidationError{}

// Validate checks the field values on GrantsServiceListGrantsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GrantsServiceListGrantsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantsServiceListGrantsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GrantsServiceListGrantsResponseMultiError, or nil if none found.
func (m *GrantsServiceListGrantsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantsServiceListGrantsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GrantsServiceListGrantsResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GrantsServiceListGrantsResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GrantsServiceListGrantsResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetNextPageToken() != "" {

		if l := len(m.GetNextPageToken()); l < 1 || l > 4096 {
			err := GrantsServiceListGrantsResponseValidationError{
				field:  "NextPageToken",
				reason: "value length must be between 1 and 4096 bytes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GrantsServiceListGrantsResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GrantsServiceListGrantsResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GrantsServiceListGrantsResponseValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GrantsServiceListGrantsResponseMultiError(errors)
	}

	return nil
}

// GrantsServiceListGrantsResponseMultiError is an error wrapping multiple
// validation errors returned by GrantsServiceListGrantsResponse.ValidateAll()
// if the designated constraints aren't met.
type GrantsServiceListGrantsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantsServiceListGrantsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantsServiceListGrantsResponseMultiError) AllErrors() []error { return m }

// GrantsServiceListGrantsResponseValidationError is the validation error
// returned by GrantsServiceListGrantsResponse.Validate if the designated
// constraints aren't met.
type GrantsServiceListGrantsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantsServiceListGrantsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantsServiceListGrantsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantsServiceListGrantsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantsServiceListGrantsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantsServiceListGrantsResponseValidationError) ErrorName() string {
	return "GrantsServiceListGrantsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GrantsServiceListGrantsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantsServiceListGrantsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantsServiceListGrantsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantsServiceListGrantsResponseValidationError{}

// Validate checks the field values on GrantManagerServiceGrantRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GrantManagerServiceGrantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantManagerServiceGrantRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GrantManagerServiceGrantRequestMultiError, or nil if none found.
func (m *GrantManagerServiceGrantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantManagerServiceGrantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEntitlement() == nil {
		err := GrantManagerServiceGrantRequestValidationError{
			field:  "Entitlement",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEntitlement()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GrantManagerServiceGrantRequestValidationError{
					field:  "Entitlement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GrantManagerServiceGrantRequestValidationError{
					field:  "Entitlement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntitlement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GrantManagerServiceGrantRequestValidationError{
				field:  "Entitlement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPrincipal() == nil {
		err := GrantManagerServiceGrantRequestValidationError{
			field:  "Principal",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPrincipal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GrantManagerServiceGrantRequestValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GrantManagerServiceGrantRequestValidationError{
					field:  "Principal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrincipal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GrantManagerServiceGrantRequestValidationError{
				field:  "Principal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GrantManagerServiceGrantRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GrantManagerServiceGrantRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GrantManagerServiceGrantRequestValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GrantManagerServiceGrantRequestMultiError(errors)
	}

	return nil
}

// GrantManagerServiceGrantRequestMultiError is an error wrapping multiple
// validation errors returned by GrantManagerServiceGrantRequest.ValidateAll()
// if the designated constraints aren't met.
type GrantManagerServiceGrantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantManagerServiceGrantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantManagerServiceGrantRequestMultiError) AllErrors() []error { return m }

// GrantManagerServiceGrantRequestValidationError is the validation error
// returned by GrantManagerServiceGrantRequest.Validate if the designated
// constraints aren't met.
type GrantManagerServiceGrantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantManagerServiceGrantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantManagerServiceGrantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantManagerServiceGrantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantManagerServiceGrantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantManagerServiceGrantRequestValidationError) ErrorName() string {
	return "GrantManagerServiceGrantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GrantManagerServiceGrantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantManagerServiceGrantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantManagerServiceGrantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantManagerServiceGrantRequestValidationError{}

// Validate checks the field values on GrantManagerServiceGrantResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GrantManagerServiceGrantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantManagerServiceGrantResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GrantManagerServiceGrantResponseMultiError, or nil if none found.
func (m *GrantManagerServiceGrantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantManagerServiceGrantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GrantManagerServiceGrantResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GrantManagerServiceGrantResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GrantManagerServiceGrantResponseValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetGrants() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GrantManagerServiceGrantResponseValidationError{
						field:  fmt.Sprintf("Grants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GrantManagerServiceGrantResponseValidationError{
						field:  fmt.Sprintf("Grants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GrantManagerServiceGrantResponseValidationError{
					field:  fmt.Sprintf("Grants[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GrantManagerServiceGrantResponseMultiError(errors)
	}

	return nil
}

// GrantManagerServiceGrantResponseMultiError is an error wrapping multiple
// validation errors returned by
// GrantManagerServiceGrantResponse.ValidateAll() if the designated
// constraints aren't met.
type GrantManagerServiceGrantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantManagerServiceGrantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantManagerServiceGrantResponseMultiError) AllErrors() []error { return m }

// GrantManagerServiceGrantResponseValidationError is the validation error
// returned by GrantManagerServiceGrantResponse.Validate if the designated
// constraints aren't met.
type GrantManagerServiceGrantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantManagerServiceGrantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantManagerServiceGrantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantManagerServiceGrantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantManagerServiceGrantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantManagerServiceGrantResponseValidationError) ErrorName() string {
	return "GrantManagerServiceGrantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GrantManagerServiceGrantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantManagerServiceGrantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantManagerServiceGrantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantManagerServiceGrantResponseValidationError{}

// Validate checks the field values on GrantManagerServiceRevokeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GrantManagerServiceRevokeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantManagerServiceRevokeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GrantManagerServiceRevokeRequestMultiError, or nil if none found.
func (m *GrantManagerServiceRevokeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantManagerServiceRevokeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGrant() == nil {
		err := GrantManagerServiceRevokeRequestValidationError{
			field:  "Grant",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetGrant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GrantManagerServiceRevokeRequestValidationError{
					field:  "Grant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GrantManagerServiceRevokeRequestValidationError{
					field:  "Grant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GrantManagerServiceRevokeRequestValidationError{
				field:  "Grant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GrantManagerServiceRevokeRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GrantManagerServiceRevokeRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GrantManagerServiceRevokeRequestValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GrantManagerServiceRevokeRequestMultiError(errors)
	}

	return nil
}

// GrantManagerServiceRevokeRequestMultiError is an error wrapping multiple
// validation errors returned by
// GrantManagerServiceRevokeRequest.ValidateAll() if the designated
// constraints aren't met.
type GrantManagerServiceRevokeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantManagerServiceRevokeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantManagerServiceRevokeRequestMultiError) AllErrors() []error { return m }

// GrantManagerServiceRevokeRequestValidationError is the validation error
// returned by GrantManagerServiceRevokeRequest.Validate if the designated
// constraints aren't met.
type GrantManagerServiceRevokeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantManagerServiceRevokeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantManagerServiceRevokeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantManagerServiceRevokeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantManagerServiceRevokeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantManagerServiceRevokeRequestValidationError) ErrorName() string {
	return "GrantManagerServiceRevokeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GrantManagerServiceRevokeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantManagerServiceRevokeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantManagerServiceRevokeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantManagerServiceRevokeRequestValidationError{}

// Validate checks the field values on GrantManagerServiceRevokeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GrantManagerServiceRevokeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantManagerServiceRevokeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GrantManagerServiceRevokeResponseMultiError, or nil if none found.
func (m *GrantManagerServiceRevokeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantManagerServiceRevokeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GrantManagerServiceRevokeResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GrantManagerServiceRevokeResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GrantManagerServiceRevokeResponseValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GrantManagerServiceRevokeResponseMultiError(errors)
	}

	return nil
}

// GrantManagerServiceRevokeResponseMultiError is an error wrapping multiple
// validation errors returned by
// GrantManagerServiceRevokeResponse.ValidateAll() if the designated
// constraints aren't met.
type GrantManagerServiceRevokeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantManagerServiceRevokeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantManagerServiceRevokeResponseMultiError) AllErrors() []error { return m }

// GrantManagerServiceRevokeResponseValidationError is the validation error
// returned by GrantManagerServiceRevokeResponse.Validate if the designated
// constraints aren't met.
type GrantManagerServiceRevokeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantManagerServiceRevokeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantManagerServiceRevokeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantManagerServiceRevokeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantManagerServiceRevokeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantManagerServiceRevokeResponseValidationError) ErrorName() string {
	return "GrantManagerServiceRevokeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GrantManagerServiceRevokeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantManagerServiceRevokeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantManagerServiceRevokeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantManagerServiceRevokeResponseValidationError{}

// Validate checks the field values on GrantSources_GrantSource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GrantSources_GrantSource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantSources_GrantSource with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GrantSources_GrantSourceMultiError, or nil if none found.
func (m *GrantSources_GrantSource) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantSources_GrantSource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GrantSources_GrantSourceMultiError(errors)
	}

	return nil
}

// GrantSources_GrantSourceMultiError is an error wrapping multiple validation
// errors returned by GrantSources_GrantSource.ValidateAll() if the designated
// constraints aren't met.
type GrantSources_GrantSourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantSources_GrantSourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantSources_GrantSourceMultiError) AllErrors() []error { return m }

// GrantSources_GrantSourceValidationError is the validation error returned by
// GrantSources_GrantSource.Validate if the designated constraints aren't met.
type GrantSources_GrantSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantSources_GrantSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantSources_GrantSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantSources_GrantSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantSources_GrantSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantSources_GrantSourceValidationError) ErrorName() string {
	return "GrantSources_GrantSourceValidationError"
}

// Error satisfies the builtin error interface
func (e GrantSources_GrantSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantSources_GrantSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantSources_GrantSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantSources_GrantSourceValidationError{}
