// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: c1/connector/v2/entitlement.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EntitlementsServiceClient is the client API for EntitlementsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntitlementsServiceClient interface {
	ListEntitlements(ctx context.Context, in *EntitlementsServiceListEntitlementsRequest, opts ...grpc.CallOption) (*EntitlementsServiceListEntitlementsResponse, error)
}

type entitlementsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEntitlementsServiceClient(cc grpc.ClientConnInterface) EntitlementsServiceClient {
	return &entitlementsServiceClient{cc}
}

func (c *entitlementsServiceClient) ListEntitlements(ctx context.Context, in *EntitlementsServiceListEntitlementsRequest, opts ...grpc.CallOption) (*EntitlementsServiceListEntitlementsResponse, error) {
	out := new(EntitlementsServiceListEntitlementsResponse)
	err := c.cc.Invoke(ctx, "/c1.connector.v2.EntitlementsService/ListEntitlements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntitlementsServiceServer is the server API for EntitlementsService service.
// All implementations should embed UnimplementedEntitlementsServiceServer
// for forward compatibility
type EntitlementsServiceServer interface {
	ListEntitlements(context.Context, *EntitlementsServiceListEntitlementsRequest) (*EntitlementsServiceListEntitlementsResponse, error)
}

// UnimplementedEntitlementsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEntitlementsServiceServer struct {
}

func (UnimplementedEntitlementsServiceServer) ListEntitlements(context.Context, *EntitlementsServiceListEntitlementsRequest) (*EntitlementsServiceListEntitlementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntitlements not implemented")
}

// UnsafeEntitlementsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntitlementsServiceServer will
// result in compilation errors.
type UnsafeEntitlementsServiceServer interface {
	mustEmbedUnimplementedEntitlementsServiceServer()
}

func RegisterEntitlementsServiceServer(s grpc.ServiceRegistrar, srv EntitlementsServiceServer) {
	s.RegisterService(&EntitlementsService_ServiceDesc, srv)
}

func _EntitlementsService_ListEntitlements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntitlementsServiceListEntitlementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitlementsServiceServer).ListEntitlements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/c1.connector.v2.EntitlementsService/ListEntitlements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitlementsServiceServer).ListEntitlements(ctx, req.(*EntitlementsServiceListEntitlementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EntitlementsService_ServiceDesc is the grpc.ServiceDesc for EntitlementsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EntitlementsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "c1.connector.v2.EntitlementsService",
	HandlerType: (*EntitlementsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEntitlements",
			Handler:    _EntitlementsService_ListEntitlements_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "c1/connector/v2/entitlement.proto",
}
