// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: c1/connector/v2/asset.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AssetServiceClient is the client API for AssetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetServiceClient interface {
	GetAsset(ctx context.Context, in *AssetServiceGetAssetRequest, opts ...grpc.CallOption) (AssetService_GetAssetClient, error)
}

type assetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetServiceClient(cc grpc.ClientConnInterface) AssetServiceClient {
	return &assetServiceClient{cc}
}

func (c *assetServiceClient) GetAsset(ctx context.Context, in *AssetServiceGetAssetRequest, opts ...grpc.CallOption) (AssetService_GetAssetClient, error) {
	stream, err := c.cc.NewStream(ctx, &AssetService_ServiceDesc.Streams[0], "/c1.connector.v2.AssetService/GetAsset", opts...)
	if err != nil {
		return nil, err
	}
	x := &assetServiceGetAssetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AssetService_GetAssetClient interface {
	Recv() (*AssetServiceGetAssetResponse, error)
	grpc.ClientStream
}

type assetServiceGetAssetClient struct {
	grpc.ClientStream
}

func (x *assetServiceGetAssetClient) Recv() (*AssetServiceGetAssetResponse, error) {
	m := new(AssetServiceGetAssetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AssetServiceServer is the server API for AssetService service.
// All implementations should embed UnimplementedAssetServiceServer
// for forward compatibility
type AssetServiceServer interface {
	GetAsset(*AssetServiceGetAssetRequest, AssetService_GetAssetServer) error
}

// UnimplementedAssetServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAssetServiceServer struct {
}

func (UnimplementedAssetServiceServer) GetAsset(*AssetServiceGetAssetRequest, AssetService_GetAssetServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAsset not implemented")
}

// UnsafeAssetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetServiceServer will
// result in compilation errors.
type UnsafeAssetServiceServer interface {
	mustEmbedUnimplementedAssetServiceServer()
}

func RegisterAssetServiceServer(s grpc.ServiceRegistrar, srv AssetServiceServer) {
	s.RegisterService(&AssetService_ServiceDesc, srv)
}

func _AssetService_GetAsset_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AssetServiceGetAssetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AssetServiceServer).GetAsset(m, &assetServiceGetAssetServer{stream})
}

type AssetService_GetAssetServer interface {
	Send(*AssetServiceGetAssetResponse) error
	grpc.ServerStream
}

type assetServiceGetAssetServer struct {
	grpc.ServerStream
}

func (x *assetServiceGetAssetServer) Send(m *AssetServiceGetAssetResponse) error {
	return x.ServerStream.SendMsg(m)
}

// AssetService_ServiceDesc is the grpc.ServiceDesc for AssetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "c1.connector.v2.AssetService",
	HandlerType: (*AssetServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAsset",
			Handler:       _AssetService_GetAsset_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "c1/connector/v2/asset.proto",
}
