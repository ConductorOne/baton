// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: c1/connector/v2/ticket.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TicketSchema with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TicketSchema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketSchema with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TicketSchemaMultiError, or
// nil if none found.
func (m *TicketSchema) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketSchema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DisplayName

	for idx, item := range m.GetTypes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketSchemaValidationError{
						field:  fmt.Sprintf("Types[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketSchemaValidationError{
						field:  fmt.Sprintf("Types[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketSchemaValidationError{
					field:  fmt.Sprintf("Types[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetStatuses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketSchemaValidationError{
						field:  fmt.Sprintf("Statuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketSchemaValidationError{
						field:  fmt.Sprintf("Statuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketSchemaValidationError{
					field:  fmt.Sprintf("Statuses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	{
		sorted_keys := make([]string, len(m.GetCustomFields()))
		i := 0
		for key := range m.GetCustomFields() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetCustomFields()[key]
			_ = val

			// no validation rules for CustomFields[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, TicketSchemaValidationError{
							field:  fmt.Sprintf("CustomFields[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, TicketSchemaValidationError{
							field:  fmt.Sprintf("CustomFields[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return TicketSchemaValidationError{
						field:  fmt.Sprintf("CustomFields[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketSchemaValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketSchemaValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketSchemaValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TicketSchemaMultiError(errors)
	}

	return nil
}

// TicketSchemaMultiError is an error wrapping multiple validation errors
// returned by TicketSchema.ValidateAll() if the designated constraints aren't met.
type TicketSchemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketSchemaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketSchemaMultiError) AllErrors() []error { return m }

// TicketSchemaValidationError is the validation error returned by
// TicketSchema.Validate if the designated constraints aren't met.
type TicketSchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketSchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketSchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketSchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketSchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketSchemaValidationError) ErrorName() string { return "TicketSchemaValidationError" }

// Error satisfies the builtin error interface
func (e TicketSchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketSchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketSchemaValidationError{}

// Validate checks the field values on TicketCustomField with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TicketCustomField) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketCustomField with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TicketCustomFieldMultiError, or nil if none found.
func (m *TicketCustomField) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketCustomField) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DisplayName

	// no validation rules for Required

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketCustomFieldValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketCustomFieldValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketCustomFieldValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	switch v := m.Value.(type) {
	case *TicketCustomField_StringValue:
		if v == nil {
			err := TicketCustomFieldValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStringValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketCustomFieldValidationError{
						field:  "StringValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketCustomFieldValidationError{
						field:  "StringValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStringValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketCustomFieldValidationError{
					field:  "StringValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TicketCustomField_StringValues:
		if v == nil {
			err := TicketCustomFieldValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStringValues()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketCustomFieldValidationError{
						field:  "StringValues",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketCustomFieldValidationError{
						field:  "StringValues",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStringValues()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketCustomFieldValidationError{
					field:  "StringValues",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TicketCustomField_BoolValue:
		if v == nil {
			err := TicketCustomFieldValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBoolValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketCustomFieldValidationError{
						field:  "BoolValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketCustomFieldValidationError{
						field:  "BoolValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBoolValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketCustomFieldValidationError{
					field:  "BoolValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TicketCustomField_TimestampValue:
		if v == nil {
			err := TicketCustomFieldValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTimestampValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketCustomFieldValidationError{
						field:  "TimestampValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketCustomFieldValidationError{
						field:  "TimestampValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTimestampValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketCustomFieldValidationError{
					field:  "TimestampValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TicketCustomField_PickStringValue:
		if v == nil {
			err := TicketCustomFieldValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPickStringValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketCustomFieldValidationError{
						field:  "PickStringValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketCustomFieldValidationError{
						field:  "PickStringValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPickStringValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketCustomFieldValidationError{
					field:  "PickStringValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TicketCustomField_PickMultipleStringValues:
		if v == nil {
			err := TicketCustomFieldValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPickMultipleStringValues()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketCustomFieldValidationError{
						field:  "PickMultipleStringValues",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketCustomFieldValidationError{
						field:  "PickMultipleStringValues",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPickMultipleStringValues()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketCustomFieldValidationError{
					field:  "PickMultipleStringValues",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TicketCustomField_PickObjectValue:
		if v == nil {
			err := TicketCustomFieldValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPickObjectValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketCustomFieldValidationError{
						field:  "PickObjectValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketCustomFieldValidationError{
						field:  "PickObjectValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPickObjectValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketCustomFieldValidationError{
					field:  "PickObjectValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TicketCustomField_PickMultipleObjectValues:
		if v == nil {
			err := TicketCustomFieldValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPickMultipleObjectValues()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketCustomFieldValidationError{
						field:  "PickMultipleObjectValues",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketCustomFieldValidationError{
						field:  "PickMultipleObjectValues",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPickMultipleObjectValues()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketCustomFieldValidationError{
					field:  "PickMultipleObjectValues",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TicketCustomField_NumberValue:
		if v == nil {
			err := TicketCustomFieldValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNumberValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketCustomFieldValidationError{
						field:  "NumberValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketCustomFieldValidationError{
						field:  "NumberValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNumberValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketCustomFieldValidationError{
					field:  "NumberValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return TicketCustomFieldMultiError(errors)
	}

	return nil
}

// TicketCustomFieldMultiError is an error wrapping multiple validation errors
// returned by TicketCustomField.ValidateAll() if the designated constraints
// aren't met.
type TicketCustomFieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketCustomFieldMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketCustomFieldMultiError) AllErrors() []error { return m }

// TicketCustomFieldValidationError is the validation error returned by
// TicketCustomField.Validate if the designated constraints aren't met.
type TicketCustomFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketCustomFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketCustomFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketCustomFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketCustomFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketCustomFieldValidationError) ErrorName() string {
	return "TicketCustomFieldValidationError"
}

// Error satisfies the builtin error interface
func (e TicketCustomFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketCustomField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketCustomFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketCustomFieldValidationError{}

// Validate checks the field values on TicketCustomFieldStringValue with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TicketCustomFieldStringValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketCustomFieldStringValue with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TicketCustomFieldStringValueMultiError, or nil if none found.
func (m *TicketCustomFieldStringValue) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketCustomFieldStringValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for DefaultValue

	if len(errors) > 0 {
		return TicketCustomFieldStringValueMultiError(errors)
	}

	return nil
}

// TicketCustomFieldStringValueMultiError is an error wrapping multiple
// validation errors returned by TicketCustomFieldStringValue.ValidateAll() if
// the designated constraints aren't met.
type TicketCustomFieldStringValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketCustomFieldStringValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketCustomFieldStringValueMultiError) AllErrors() []error { return m }

// TicketCustomFieldStringValueValidationError is the validation error returned
// by TicketCustomFieldStringValue.Validate if the designated constraints
// aren't met.
type TicketCustomFieldStringValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketCustomFieldStringValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketCustomFieldStringValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketCustomFieldStringValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketCustomFieldStringValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketCustomFieldStringValueValidationError) ErrorName() string {
	return "TicketCustomFieldStringValueValidationError"
}

// Error satisfies the builtin error interface
func (e TicketCustomFieldStringValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketCustomFieldStringValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketCustomFieldStringValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketCustomFieldStringValueValidationError{}

// Validate checks the field values on TicketCustomFieldStringValues with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TicketCustomFieldStringValues) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketCustomFieldStringValues with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TicketCustomFieldStringValuesMultiError, or nil if none found.
func (m *TicketCustomFieldStringValues) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketCustomFieldStringValues) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TicketCustomFieldStringValuesMultiError(errors)
	}

	return nil
}

// TicketCustomFieldStringValuesMultiError is an error wrapping multiple
// validation errors returned by TicketCustomFieldStringValues.ValidateAll()
// if the designated constraints aren't met.
type TicketCustomFieldStringValuesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketCustomFieldStringValuesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketCustomFieldStringValuesMultiError) AllErrors() []error { return m }

// TicketCustomFieldStringValuesValidationError is the validation error
// returned by TicketCustomFieldStringValues.Validate if the designated
// constraints aren't met.
type TicketCustomFieldStringValuesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketCustomFieldStringValuesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketCustomFieldStringValuesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketCustomFieldStringValuesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketCustomFieldStringValuesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketCustomFieldStringValuesValidationError) ErrorName() string {
	return "TicketCustomFieldStringValuesValidationError"
}

// Error satisfies the builtin error interface
func (e TicketCustomFieldStringValuesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketCustomFieldStringValues.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketCustomFieldStringValuesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketCustomFieldStringValuesValidationError{}

// Validate checks the field values on TicketCustomFieldBoolValue with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TicketCustomFieldBoolValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketCustomFieldBoolValue with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TicketCustomFieldBoolValueMultiError, or nil if none found.
func (m *TicketCustomFieldBoolValue) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketCustomFieldBoolValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return TicketCustomFieldBoolValueMultiError(errors)
	}

	return nil
}

// TicketCustomFieldBoolValueMultiError is an error wrapping multiple
// validation errors returned by TicketCustomFieldBoolValue.ValidateAll() if
// the designated constraints aren't met.
type TicketCustomFieldBoolValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketCustomFieldBoolValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketCustomFieldBoolValueMultiError) AllErrors() []error { return m }

// TicketCustomFieldBoolValueValidationError is the validation error returned
// by TicketCustomFieldBoolValue.Validate if the designated constraints aren't met.
type TicketCustomFieldBoolValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketCustomFieldBoolValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketCustomFieldBoolValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketCustomFieldBoolValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketCustomFieldBoolValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketCustomFieldBoolValueValidationError) ErrorName() string {
	return "TicketCustomFieldBoolValueValidationError"
}

// Error satisfies the builtin error interface
func (e TicketCustomFieldBoolValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketCustomFieldBoolValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketCustomFieldBoolValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketCustomFieldBoolValueValidationError{}

// Validate checks the field values on TicketCustomFieldNumberValue with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TicketCustomFieldNumberValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketCustomFieldNumberValue with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TicketCustomFieldNumberValueMultiError, or nil if none found.
func (m *TicketCustomFieldNumberValue) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketCustomFieldNumberValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketCustomFieldNumberValueValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketCustomFieldNumberValueValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketCustomFieldNumberValueValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDefaultValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketCustomFieldNumberValueValidationError{
					field:  "DefaultValue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketCustomFieldNumberValueValidationError{
					field:  "DefaultValue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefaultValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketCustomFieldNumberValueValidationError{
				field:  "DefaultValue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TicketCustomFieldNumberValueMultiError(errors)
	}

	return nil
}

// TicketCustomFieldNumberValueMultiError is an error wrapping multiple
// validation errors returned by TicketCustomFieldNumberValue.ValidateAll() if
// the designated constraints aren't met.
type TicketCustomFieldNumberValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketCustomFieldNumberValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketCustomFieldNumberValueMultiError) AllErrors() []error { return m }

// TicketCustomFieldNumberValueValidationError is the validation error returned
// by TicketCustomFieldNumberValue.Validate if the designated constraints
// aren't met.
type TicketCustomFieldNumberValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketCustomFieldNumberValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketCustomFieldNumberValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketCustomFieldNumberValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketCustomFieldNumberValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketCustomFieldNumberValueValidationError) ErrorName() string {
	return "TicketCustomFieldNumberValueValidationError"
}

// Error satisfies the builtin error interface
func (e TicketCustomFieldNumberValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketCustomFieldNumberValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketCustomFieldNumberValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketCustomFieldNumberValueValidationError{}

// Validate checks the field values on TicketCustomFieldTimestampValue with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TicketCustomFieldTimestampValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketCustomFieldTimestampValue with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TicketCustomFieldTimestampValueMultiError, or nil if none found.
func (m *TicketCustomFieldTimestampValue) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketCustomFieldTimestampValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketCustomFieldTimestampValueValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketCustomFieldTimestampValueValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketCustomFieldTimestampValueValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDefaultValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketCustomFieldTimestampValueValidationError{
					field:  "DefaultValue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketCustomFieldTimestampValueValidationError{
					field:  "DefaultValue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefaultValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketCustomFieldTimestampValueValidationError{
				field:  "DefaultValue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TicketCustomFieldTimestampValueMultiError(errors)
	}

	return nil
}

// TicketCustomFieldTimestampValueMultiError is an error wrapping multiple
// validation errors returned by TicketCustomFieldTimestampValue.ValidateAll()
// if the designated constraints aren't met.
type TicketCustomFieldTimestampValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketCustomFieldTimestampValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketCustomFieldTimestampValueMultiError) AllErrors() []error { return m }

// TicketCustomFieldTimestampValueValidationError is the validation error
// returned by TicketCustomFieldTimestampValue.Validate if the designated
// constraints aren't met.
type TicketCustomFieldTimestampValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketCustomFieldTimestampValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketCustomFieldTimestampValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketCustomFieldTimestampValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketCustomFieldTimestampValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketCustomFieldTimestampValueValidationError) ErrorName() string {
	return "TicketCustomFieldTimestampValueValidationError"
}

// Error satisfies the builtin error interface
func (e TicketCustomFieldTimestampValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketCustomFieldTimestampValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketCustomFieldTimestampValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketCustomFieldTimestampValueValidationError{}

// Validate checks the field values on TicketCustomFieldPickStringValue with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TicketCustomFieldPickStringValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketCustomFieldPickStringValue with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TicketCustomFieldPickStringValueMultiError, or nil if none found.
func (m *TicketCustomFieldPickStringValue) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketCustomFieldPickStringValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for DefaultValue

	if len(errors) > 0 {
		return TicketCustomFieldPickStringValueMultiError(errors)
	}

	return nil
}

// TicketCustomFieldPickStringValueMultiError is an error wrapping multiple
// validation errors returned by
// TicketCustomFieldPickStringValue.ValidateAll() if the designated
// constraints aren't met.
type TicketCustomFieldPickStringValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketCustomFieldPickStringValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketCustomFieldPickStringValueMultiError) AllErrors() []error { return m }

// TicketCustomFieldPickStringValueValidationError is the validation error
// returned by TicketCustomFieldPickStringValue.Validate if the designated
// constraints aren't met.
type TicketCustomFieldPickStringValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketCustomFieldPickStringValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketCustomFieldPickStringValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketCustomFieldPickStringValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketCustomFieldPickStringValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketCustomFieldPickStringValueValidationError) ErrorName() string {
	return "TicketCustomFieldPickStringValueValidationError"
}

// Error satisfies the builtin error interface
func (e TicketCustomFieldPickStringValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketCustomFieldPickStringValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketCustomFieldPickStringValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketCustomFieldPickStringValueValidationError{}

// Validate checks the field values on
// TicketCustomFieldPickMultipleStringValues with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TicketCustomFieldPickMultipleStringValues) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TicketCustomFieldPickMultipleStringValues with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// TicketCustomFieldPickMultipleStringValuesMultiError, or nil if none found.
func (m *TicketCustomFieldPickMultipleStringValues) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketCustomFieldPickMultipleStringValues) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TicketCustomFieldPickMultipleStringValuesMultiError(errors)
	}

	return nil
}

// TicketCustomFieldPickMultipleStringValuesMultiError is an error wrapping
// multiple validation errors returned by
// TicketCustomFieldPickMultipleStringValues.ValidateAll() if the designated
// constraints aren't met.
type TicketCustomFieldPickMultipleStringValuesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketCustomFieldPickMultipleStringValuesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketCustomFieldPickMultipleStringValuesMultiError) AllErrors() []error { return m }

// TicketCustomFieldPickMultipleStringValuesValidationError is the validation
// error returned by TicketCustomFieldPickMultipleStringValues.Validate if the
// designated constraints aren't met.
type TicketCustomFieldPickMultipleStringValuesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketCustomFieldPickMultipleStringValuesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketCustomFieldPickMultipleStringValuesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketCustomFieldPickMultipleStringValuesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketCustomFieldPickMultipleStringValuesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketCustomFieldPickMultipleStringValuesValidationError) ErrorName() string {
	return "TicketCustomFieldPickMultipleStringValuesValidationError"
}

// Error satisfies the builtin error interface
func (e TicketCustomFieldPickMultipleStringValuesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketCustomFieldPickMultipleStringValues.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketCustomFieldPickMultipleStringValuesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketCustomFieldPickMultipleStringValuesValidationError{}

// Validate checks the field values on TicketCustomFieldPickObjectValue with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TicketCustomFieldPickObjectValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketCustomFieldPickObjectValue with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TicketCustomFieldPickObjectValueMultiError, or nil if none found.
func (m *TicketCustomFieldPickObjectValue) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketCustomFieldPickObjectValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketCustomFieldPickObjectValueValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketCustomFieldPickObjectValueValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketCustomFieldPickObjectValueValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAllowedValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketCustomFieldPickObjectValueValidationError{
						field:  fmt.Sprintf("AllowedValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketCustomFieldPickObjectValueValidationError{
						field:  fmt.Sprintf("AllowedValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketCustomFieldPickObjectValueValidationError{
					field:  fmt.Sprintf("AllowedValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetDefaultValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketCustomFieldPickObjectValueValidationError{
					field:  "DefaultValue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketCustomFieldPickObjectValueValidationError{
					field:  "DefaultValue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefaultValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketCustomFieldPickObjectValueValidationError{
				field:  "DefaultValue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TicketCustomFieldPickObjectValueMultiError(errors)
	}

	return nil
}

// TicketCustomFieldPickObjectValueMultiError is an error wrapping multiple
// validation errors returned by
// TicketCustomFieldPickObjectValue.ValidateAll() if the designated
// constraints aren't met.
type TicketCustomFieldPickObjectValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketCustomFieldPickObjectValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketCustomFieldPickObjectValueMultiError) AllErrors() []error { return m }

// TicketCustomFieldPickObjectValueValidationError is the validation error
// returned by TicketCustomFieldPickObjectValue.Validate if the designated
// constraints aren't met.
type TicketCustomFieldPickObjectValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketCustomFieldPickObjectValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketCustomFieldPickObjectValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketCustomFieldPickObjectValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketCustomFieldPickObjectValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketCustomFieldPickObjectValueValidationError) ErrorName() string {
	return "TicketCustomFieldPickObjectValueValidationError"
}

// Error satisfies the builtin error interface
func (e TicketCustomFieldPickObjectValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketCustomFieldPickObjectValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketCustomFieldPickObjectValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketCustomFieldPickObjectValueValidationError{}

// Validate checks the field values on
// TicketCustomFieldPickMultipleObjectValues with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TicketCustomFieldPickMultipleObjectValues) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TicketCustomFieldPickMultipleObjectValues with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// TicketCustomFieldPickMultipleObjectValuesMultiError, or nil if none found.
func (m *TicketCustomFieldPickMultipleObjectValues) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketCustomFieldPickMultipleObjectValues) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketCustomFieldPickMultipleObjectValuesValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketCustomFieldPickMultipleObjectValuesValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketCustomFieldPickMultipleObjectValuesValidationError{
					field:  fmt.Sprintf("Values[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAllowedValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketCustomFieldPickMultipleObjectValuesValidationError{
						field:  fmt.Sprintf("AllowedValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketCustomFieldPickMultipleObjectValuesValidationError{
						field:  fmt.Sprintf("AllowedValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketCustomFieldPickMultipleObjectValuesValidationError{
					field:  fmt.Sprintf("AllowedValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDefaultValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketCustomFieldPickMultipleObjectValuesValidationError{
						field:  fmt.Sprintf("DefaultValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketCustomFieldPickMultipleObjectValuesValidationError{
						field:  fmt.Sprintf("DefaultValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketCustomFieldPickMultipleObjectValuesValidationError{
					field:  fmt.Sprintf("DefaultValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TicketCustomFieldPickMultipleObjectValuesMultiError(errors)
	}

	return nil
}

// TicketCustomFieldPickMultipleObjectValuesMultiError is an error wrapping
// multiple validation errors returned by
// TicketCustomFieldPickMultipleObjectValues.ValidateAll() if the designated
// constraints aren't met.
type TicketCustomFieldPickMultipleObjectValuesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketCustomFieldPickMultipleObjectValuesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketCustomFieldPickMultipleObjectValuesMultiError) AllErrors() []error { return m }

// TicketCustomFieldPickMultipleObjectValuesValidationError is the validation
// error returned by TicketCustomFieldPickMultipleObjectValues.Validate if the
// designated constraints aren't met.
type TicketCustomFieldPickMultipleObjectValuesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketCustomFieldPickMultipleObjectValuesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketCustomFieldPickMultipleObjectValuesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketCustomFieldPickMultipleObjectValuesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketCustomFieldPickMultipleObjectValuesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketCustomFieldPickMultipleObjectValuesValidationError) ErrorName() string {
	return "TicketCustomFieldPickMultipleObjectValuesValidationError"
}

// Error satisfies the builtin error interface
func (e TicketCustomFieldPickMultipleObjectValuesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketCustomFieldPickMultipleObjectValues.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketCustomFieldPickMultipleObjectValuesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketCustomFieldPickMultipleObjectValuesValidationError{}

// Validate checks the field values on TicketCustomFieldObjectValue with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TicketCustomFieldObjectValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketCustomFieldObjectValue with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TicketCustomFieldObjectValueMultiError, or nil if none found.
func (m *TicketCustomFieldObjectValue) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketCustomFieldObjectValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return TicketCustomFieldObjectValueMultiError(errors)
	}

	return nil
}

// TicketCustomFieldObjectValueMultiError is an error wrapping multiple
// validation errors returned by TicketCustomFieldObjectValue.ValidateAll() if
// the designated constraints aren't met.
type TicketCustomFieldObjectValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketCustomFieldObjectValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketCustomFieldObjectValueMultiError) AllErrors() []error { return m }

// TicketCustomFieldObjectValueValidationError is the validation error returned
// by TicketCustomFieldObjectValue.Validate if the designated constraints
// aren't met.
type TicketCustomFieldObjectValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketCustomFieldObjectValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketCustomFieldObjectValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketCustomFieldObjectValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketCustomFieldObjectValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketCustomFieldObjectValueValidationError) ErrorName() string {
	return "TicketCustomFieldObjectValueValidationError"
}

// Error satisfies the builtin error interface
func (e TicketCustomFieldObjectValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketCustomFieldObjectValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketCustomFieldObjectValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketCustomFieldObjectValueValidationError{}

// Validate checks the field values on TicketStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TicketStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TicketStatusMultiError, or
// nil if none found.
func (m *TicketStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return TicketStatusMultiError(errors)
	}

	return nil
}

// TicketStatusMultiError is an error wrapping multiple validation errors
// returned by TicketStatus.ValidateAll() if the designated constraints aren't met.
type TicketStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketStatusMultiError) AllErrors() []error { return m }

// TicketStatusValidationError is the validation error returned by
// TicketStatus.Validate if the designated constraints aren't met.
type TicketStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketStatusValidationError) ErrorName() string { return "TicketStatusValidationError" }

// Error satisfies the builtin error interface
func (e TicketStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketStatusValidationError{}

// Validate checks the field values on TicketsServiceGetTicketSchemaRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TicketsServiceGetTicketSchemaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketsServiceGetTicketSchemaRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TicketsServiceGetTicketSchemaRequestMultiError, or nil if none found.
func (m *TicketsServiceGetTicketSchemaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketsServiceGetTicketSchemaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketsServiceGetTicketSchemaRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketsServiceGetTicketSchemaRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketsServiceGetTicketSchemaRequestValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TicketsServiceGetTicketSchemaRequestMultiError(errors)
	}

	return nil
}

// TicketsServiceGetTicketSchemaRequestMultiError is an error wrapping multiple
// validation errors returned by
// TicketsServiceGetTicketSchemaRequest.ValidateAll() if the designated
// constraints aren't met.
type TicketsServiceGetTicketSchemaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketsServiceGetTicketSchemaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketsServiceGetTicketSchemaRequestMultiError) AllErrors() []error { return m }

// TicketsServiceGetTicketSchemaRequestValidationError is the validation error
// returned by TicketsServiceGetTicketSchemaRequest.Validate if the designated
// constraints aren't met.
type TicketsServiceGetTicketSchemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketsServiceGetTicketSchemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketsServiceGetTicketSchemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketsServiceGetTicketSchemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketsServiceGetTicketSchemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketsServiceGetTicketSchemaRequestValidationError) ErrorName() string {
	return "TicketsServiceGetTicketSchemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TicketsServiceGetTicketSchemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketsServiceGetTicketSchemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketsServiceGetTicketSchemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketsServiceGetTicketSchemaRequestValidationError{}

// Validate checks the field values on TicketsServiceGetTicketSchemaResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TicketsServiceGetTicketSchemaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketsServiceGetTicketSchemaResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TicketsServiceGetTicketSchemaResponseMultiError, or nil if none found.
func (m *TicketsServiceGetTicketSchemaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketsServiceGetTicketSchemaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketsServiceGetTicketSchemaResponseValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketsServiceGetTicketSchemaResponseValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketsServiceGetTicketSchemaResponseValidationError{
				field:  "Schema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketsServiceGetTicketSchemaResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketsServiceGetTicketSchemaResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketsServiceGetTicketSchemaResponseValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TicketsServiceGetTicketSchemaResponseMultiError(errors)
	}

	return nil
}

// TicketsServiceGetTicketSchemaResponseMultiError is an error wrapping
// multiple validation errors returned by
// TicketsServiceGetTicketSchemaResponse.ValidateAll() if the designated
// constraints aren't met.
type TicketsServiceGetTicketSchemaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketsServiceGetTicketSchemaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketsServiceGetTicketSchemaResponseMultiError) AllErrors() []error { return m }

// TicketsServiceGetTicketSchemaResponseValidationError is the validation error
// returned by TicketsServiceGetTicketSchemaResponse.Validate if the
// designated constraints aren't met.
type TicketsServiceGetTicketSchemaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketsServiceGetTicketSchemaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketsServiceGetTicketSchemaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketsServiceGetTicketSchemaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketsServiceGetTicketSchemaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketsServiceGetTicketSchemaResponseValidationError) ErrorName() string {
	return "TicketsServiceGetTicketSchemaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TicketsServiceGetTicketSchemaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketsServiceGetTicketSchemaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketsServiceGetTicketSchemaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketsServiceGetTicketSchemaResponseValidationError{}

// Validate checks the field values on TicketsServiceListTicketSchemasRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TicketsServiceListTicketSchemasRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TicketsServiceListTicketSchemasRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// TicketsServiceListTicketSchemasRequestMultiError, or nil if none found.
func (m *TicketsServiceListTicketSchemasRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketsServiceListTicketSchemasRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 250 {
			err := TicketsServiceListTicketSchemasRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 250",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPageToken() != "" {

		if l := len(m.GetPageToken()); l < 1 || l > 4096 {
			err := TicketsServiceListTicketSchemasRequestValidationError{
				field:  "PageToken",
				reason: "value length must be between 1 and 4096 bytes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketsServiceListTicketSchemasRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketsServiceListTicketSchemasRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketsServiceListTicketSchemasRequestValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TicketsServiceListTicketSchemasRequestMultiError(errors)
	}

	return nil
}

// TicketsServiceListTicketSchemasRequestMultiError is an error wrapping
// multiple validation errors returned by
// TicketsServiceListTicketSchemasRequest.ValidateAll() if the designated
// constraints aren't met.
type TicketsServiceListTicketSchemasRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketsServiceListTicketSchemasRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketsServiceListTicketSchemasRequestMultiError) AllErrors() []error { return m }

// TicketsServiceListTicketSchemasRequestValidationError is the validation
// error returned by TicketsServiceListTicketSchemasRequest.Validate if the
// designated constraints aren't met.
type TicketsServiceListTicketSchemasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketsServiceListTicketSchemasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketsServiceListTicketSchemasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketsServiceListTicketSchemasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketsServiceListTicketSchemasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketsServiceListTicketSchemasRequestValidationError) ErrorName() string {
	return "TicketsServiceListTicketSchemasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TicketsServiceListTicketSchemasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketsServiceListTicketSchemasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketsServiceListTicketSchemasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketsServiceListTicketSchemasRequestValidationError{}

// Validate checks the field values on TicketsServiceListTicketSchemasResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TicketsServiceListTicketSchemasResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TicketsServiceListTicketSchemasResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// TicketsServiceListTicketSchemasResponseMultiError, or nil if none found.
func (m *TicketsServiceListTicketSchemasResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketsServiceListTicketSchemasResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketsServiceListTicketSchemasResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketsServiceListTicketSchemasResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketsServiceListTicketSchemasResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetNextPageToken() != "" {

		if l := len(m.GetNextPageToken()); l < 1 || l > 4096 {
			err := TicketsServiceListTicketSchemasResponseValidationError{
				field:  "NextPageToken",
				reason: "value length must be between 1 and 4096 bytes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketsServiceListTicketSchemasResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketsServiceListTicketSchemasResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketsServiceListTicketSchemasResponseValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TicketsServiceListTicketSchemasResponseMultiError(errors)
	}

	return nil
}

// TicketsServiceListTicketSchemasResponseMultiError is an error wrapping
// multiple validation errors returned by
// TicketsServiceListTicketSchemasResponse.ValidateAll() if the designated
// constraints aren't met.
type TicketsServiceListTicketSchemasResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketsServiceListTicketSchemasResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketsServiceListTicketSchemasResponseMultiError) AllErrors() []error { return m }

// TicketsServiceListTicketSchemasResponseValidationError is the validation
// error returned by TicketsServiceListTicketSchemasResponse.Validate if the
// designated constraints aren't met.
type TicketsServiceListTicketSchemasResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketsServiceListTicketSchemasResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketsServiceListTicketSchemasResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketsServiceListTicketSchemasResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketsServiceListTicketSchemasResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketsServiceListTicketSchemasResponseValidationError) ErrorName() string {
	return "TicketsServiceListTicketSchemasResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TicketsServiceListTicketSchemasResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketsServiceListTicketSchemasResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketsServiceListTicketSchemasResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketsServiceListTicketSchemasResponseValidationError{}

// Validate checks the field values on Ticket with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Ticket) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ticket with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TicketMultiError, or nil if none found.
func (m *Ticket) ValidateAll() error {
	return m.validate(true)
}

func (m *Ticket) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DisplayName

	// no validation rules for Description

	for idx, item := range m.GetAssignees() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketValidationError{
						field:  fmt.Sprintf("Assignees[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketValidationError{
						field:  fmt.Sprintf("Assignees[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketValidationError{
					field:  fmt.Sprintf("Assignees[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetReporter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketValidationError{
					field:  "Reporter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketValidationError{
					field:  "Reporter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReporter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketValidationError{
				field:  "Reporter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Url

	{
		sorted_keys := make([]string, len(m.GetCustomFields()))
		i := 0
		for key := range m.GetCustomFields() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetCustomFields()[key]
			_ = val

			// no validation rules for CustomFields[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, TicketValidationError{
							field:  fmt.Sprintf("CustomFields[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, TicketValidationError{
							field:  fmt.Sprintf("CustomFields[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return TicketValidationError{
						field:  fmt.Sprintf("CustomFields[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCompletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketValidationError{
					field:  "CompletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketValidationError{
					field:  "CompletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketValidationError{
				field:  "CompletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRequestedFor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketValidationError{
					field:  "RequestedFor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketValidationError{
					field:  "RequestedFor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestedFor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketValidationError{
				field:  "RequestedFor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TicketMultiError(errors)
	}

	return nil
}

// TicketMultiError is an error wrapping multiple validation errors returned by
// Ticket.ValidateAll() if the designated constraints aren't met.
type TicketMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketMultiError) AllErrors() []error { return m }

// TicketValidationError is the validation error returned by Ticket.Validate if
// the designated constraints aren't met.
type TicketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketValidationError) ErrorName() string { return "TicketValidationError" }

// Error satisfies the builtin error interface
func (e TicketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketValidationError{}

// Validate checks the field values on TicketType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TicketType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TicketTypeMultiError, or
// nil if none found.
func (m *TicketType) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return TicketTypeMultiError(errors)
	}

	return nil
}

// TicketTypeMultiError is an error wrapping multiple validation errors
// returned by TicketType.ValidateAll() if the designated constraints aren't met.
type TicketTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketTypeMultiError) AllErrors() []error { return m }

// TicketTypeValidationError is the validation error returned by
// TicketType.Validate if the designated constraints aren't met.
type TicketTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketTypeValidationError) ErrorName() string { return "TicketTypeValidationError" }

// Error satisfies the builtin error interface
func (e TicketTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketTypeValidationError{}

// Validate checks the field values on TicketRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TicketRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TicketRequestMultiError, or
// nil if none found.
func (m *TicketRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DisplayName

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketRequestValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketRequestValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketRequestValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketRequestValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetCustomFields()))
		i := 0
		for key := range m.GetCustomFields() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetCustomFields()[key]
			_ = val

			// no validation rules for CustomFields[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, TicketRequestValidationError{
							field:  fmt.Sprintf("CustomFields[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, TicketRequestValidationError{
							field:  fmt.Sprintf("CustomFields[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return TicketRequestValidationError{
						field:  fmt.Sprintf("CustomFields[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetRequestedFor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketRequestValidationError{
					field:  "RequestedFor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketRequestValidationError{
					field:  "RequestedFor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestedFor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketRequestValidationError{
				field:  "RequestedFor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TicketRequestMultiError(errors)
	}

	return nil
}

// TicketRequestMultiError is an error wrapping multiple validation errors
// returned by TicketRequest.ValidateAll() if the designated constraints
// aren't met.
type TicketRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketRequestMultiError) AllErrors() []error { return m }

// TicketRequestValidationError is the validation error returned by
// TicketRequest.Validate if the designated constraints aren't met.
type TicketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketRequestValidationError) ErrorName() string { return "TicketRequestValidationError" }

// Error satisfies the builtin error interface
func (e TicketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketRequestValidationError{}

// Validate checks the field values on TicketsServiceCreateTicketRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TicketsServiceCreateTicketRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketsServiceCreateTicketRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TicketsServiceCreateTicketRequestMultiError, or nil if none found.
func (m *TicketsServiceCreateTicketRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketsServiceCreateTicketRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketsServiceCreateTicketRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketsServiceCreateTicketRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketsServiceCreateTicketRequestValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketsServiceCreateTicketRequestValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketsServiceCreateTicketRequestValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketsServiceCreateTicketRequestValidationError{
				field:  "Schema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketsServiceCreateTicketRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketsServiceCreateTicketRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketsServiceCreateTicketRequestValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TicketsServiceCreateTicketRequestMultiError(errors)
	}

	return nil
}

// TicketsServiceCreateTicketRequestMultiError is an error wrapping multiple
// validation errors returned by
// TicketsServiceCreateTicketRequest.ValidateAll() if the designated
// constraints aren't met.
type TicketsServiceCreateTicketRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketsServiceCreateTicketRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketsServiceCreateTicketRequestMultiError) AllErrors() []error { return m }

// TicketsServiceCreateTicketRequestValidationError is the validation error
// returned by TicketsServiceCreateTicketRequest.Validate if the designated
// constraints aren't met.
type TicketsServiceCreateTicketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketsServiceCreateTicketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketsServiceCreateTicketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketsServiceCreateTicketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketsServiceCreateTicketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketsServiceCreateTicketRequestValidationError) ErrorName() string {
	return "TicketsServiceCreateTicketRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TicketsServiceCreateTicketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketsServiceCreateTicketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketsServiceCreateTicketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketsServiceCreateTicketRequestValidationError{}

// Validate checks the field values on TicketsServiceCreateTicketResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TicketsServiceCreateTicketResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketsServiceCreateTicketResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TicketsServiceCreateTicketResponseMultiError, or nil if none found.
func (m *TicketsServiceCreateTicketResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketsServiceCreateTicketResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTicket()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketsServiceCreateTicketResponseValidationError{
					field:  "Ticket",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketsServiceCreateTicketResponseValidationError{
					field:  "Ticket",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTicket()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketsServiceCreateTicketResponseValidationError{
				field:  "Ticket",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketsServiceCreateTicketResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketsServiceCreateTicketResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketsServiceCreateTicketResponseValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TicketsServiceCreateTicketResponseMultiError(errors)
	}

	return nil
}

// TicketsServiceCreateTicketResponseMultiError is an error wrapping multiple
// validation errors returned by
// TicketsServiceCreateTicketResponse.ValidateAll() if the designated
// constraints aren't met.
type TicketsServiceCreateTicketResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketsServiceCreateTicketResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketsServiceCreateTicketResponseMultiError) AllErrors() []error { return m }

// TicketsServiceCreateTicketResponseValidationError is the validation error
// returned by TicketsServiceCreateTicketResponse.Validate if the designated
// constraints aren't met.
type TicketsServiceCreateTicketResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketsServiceCreateTicketResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketsServiceCreateTicketResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketsServiceCreateTicketResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketsServiceCreateTicketResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketsServiceCreateTicketResponseValidationError) ErrorName() string {
	return "TicketsServiceCreateTicketResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TicketsServiceCreateTicketResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketsServiceCreateTicketResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketsServiceCreateTicketResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketsServiceCreateTicketResponseValidationError{}

// Validate checks the field values on TicketsServiceGetTicketRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TicketsServiceGetTicketRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketsServiceGetTicketRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TicketsServiceGetTicketRequestMultiError, or nil if none found.
func (m *TicketsServiceGetTicketRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketsServiceGetTicketRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketsServiceGetTicketRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketsServiceGetTicketRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketsServiceGetTicketRequestValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TicketsServiceGetTicketRequestMultiError(errors)
	}

	return nil
}

// TicketsServiceGetTicketRequestMultiError is an error wrapping multiple
// validation errors returned by TicketsServiceGetTicketRequest.ValidateAll()
// if the designated constraints aren't met.
type TicketsServiceGetTicketRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketsServiceGetTicketRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketsServiceGetTicketRequestMultiError) AllErrors() []error { return m }

// TicketsServiceGetTicketRequestValidationError is the validation error
// returned by TicketsServiceGetTicketRequest.Validate if the designated
// constraints aren't met.
type TicketsServiceGetTicketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketsServiceGetTicketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketsServiceGetTicketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketsServiceGetTicketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketsServiceGetTicketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketsServiceGetTicketRequestValidationError) ErrorName() string {
	return "TicketsServiceGetTicketRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TicketsServiceGetTicketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketsServiceGetTicketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketsServiceGetTicketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketsServiceGetTicketRequestValidationError{}

// Validate checks the field values on TicketsServiceGetTicketResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TicketsServiceGetTicketResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TicketsServiceGetTicketResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TicketsServiceGetTicketResponseMultiError, or nil if none found.
func (m *TicketsServiceGetTicketResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TicketsServiceGetTicketResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTicket()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketsServiceGetTicketResponseValidationError{
					field:  "Ticket",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketsServiceGetTicketResponseValidationError{
					field:  "Ticket",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTicket()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketsServiceGetTicketResponseValidationError{
				field:  "Ticket",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketsServiceGetTicketResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketsServiceGetTicketResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketsServiceGetTicketResponseValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TicketsServiceGetTicketResponseMultiError(errors)
	}

	return nil
}

// TicketsServiceGetTicketResponseMultiError is an error wrapping multiple
// validation errors returned by TicketsServiceGetTicketResponse.ValidateAll()
// if the designated constraints aren't met.
type TicketsServiceGetTicketResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketsServiceGetTicketResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketsServiceGetTicketResponseMultiError) AllErrors() []error { return m }

// TicketsServiceGetTicketResponseValidationError is the validation error
// returned by TicketsServiceGetTicketResponse.Validate if the designated
// constraints aren't met.
type TicketsServiceGetTicketResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketsServiceGetTicketResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketsServiceGetTicketResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketsServiceGetTicketResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketsServiceGetTicketResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketsServiceGetTicketResponseValidationError) ErrorName() string {
	return "TicketsServiceGetTicketResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TicketsServiceGetTicketResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketsServiceGetTicketResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketsServiceGetTicketResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketsServiceGetTicketResponseValidationError{}
