// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: c1/connector/v2/asset.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AssetRef with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AssetRef) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetRef with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AssetRefMultiError, or nil
// if none found.
func (m *AssetRef) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetRef) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetId()); l < 1 || l > 1024 {
		err := AssetRefValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 1024 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AssetRefMultiError(errors)
	}

	return nil
}

// AssetRefMultiError is an error wrapping multiple validation errors returned
// by AssetRef.ValidateAll() if the designated constraints aren't met.
type AssetRefMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetRefMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetRefMultiError) AllErrors() []error { return m }

// AssetRefValidationError is the validation error returned by
// AssetRef.Validate if the designated constraints aren't met.
type AssetRefValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetRefValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetRefValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetRefValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetRefValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetRefValidationError) ErrorName() string { return "AssetRefValidationError" }

// Error satisfies the builtin error interface
func (e AssetRefValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetRef.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetRefValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetRefValidationError{}

// Validate checks the field values on AssetServiceGetAssetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssetServiceGetAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetServiceGetAssetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssetServiceGetAssetRequestMultiError, or nil if none found.
func (m *AssetServiceGetAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetServiceGetAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAsset() == nil {
		err := AssetServiceGetAssetRequestValidationError{
			field:  "Asset",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAsset()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssetServiceGetAssetRequestValidationError{
					field:  "Asset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssetServiceGetAssetRequestValidationError{
					field:  "Asset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAsset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetServiceGetAssetRequestValidationError{
				field:  "Asset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AssetServiceGetAssetRequestMultiError(errors)
	}

	return nil
}

// AssetServiceGetAssetRequestMultiError is an error wrapping multiple
// validation errors returned by AssetServiceGetAssetRequest.ValidateAll() if
// the designated constraints aren't met.
type AssetServiceGetAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetServiceGetAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetServiceGetAssetRequestMultiError) AllErrors() []error { return m }

// AssetServiceGetAssetRequestValidationError is the validation error returned
// by AssetServiceGetAssetRequest.Validate if the designated constraints
// aren't met.
type AssetServiceGetAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetServiceGetAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetServiceGetAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetServiceGetAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetServiceGetAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetServiceGetAssetRequestValidationError) ErrorName() string {
	return "AssetServiceGetAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssetServiceGetAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetServiceGetAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetServiceGetAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetServiceGetAssetRequestValidationError{}

// Validate checks the field values on AssetServiceGetAssetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssetServiceGetAssetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetServiceGetAssetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssetServiceGetAssetResponseMultiError, or nil if none found.
func (m *AssetServiceGetAssetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetServiceGetAssetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofMsgPresent := false
	switch v := m.Msg.(type) {
	case *AssetServiceGetAssetResponse_Metadata_:
		if v == nil {
			err := AssetServiceGetAssetResponseValidationError{
				field:  "Msg",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofMsgPresent = true

		if all {
			switch v := interface{}(m.GetMetadata()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetServiceGetAssetResponseValidationError{
						field:  "Metadata",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetServiceGetAssetResponseValidationError{
						field:  "Metadata",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetServiceGetAssetResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AssetServiceGetAssetResponse_Data_:
		if v == nil {
			err := AssetServiceGetAssetResponseValidationError{
				field:  "Msg",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofMsgPresent = true

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetServiceGetAssetResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetServiceGetAssetResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetServiceGetAssetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofMsgPresent {
		err := AssetServiceGetAssetResponseValidationError{
			field:  "Msg",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AssetServiceGetAssetResponseMultiError(errors)
	}

	return nil
}

// AssetServiceGetAssetResponseMultiError is an error wrapping multiple
// validation errors returned by AssetServiceGetAssetResponse.ValidateAll() if
// the designated constraints aren't met.
type AssetServiceGetAssetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetServiceGetAssetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetServiceGetAssetResponseMultiError) AllErrors() []error { return m }

// AssetServiceGetAssetResponseValidationError is the validation error returned
// by AssetServiceGetAssetResponse.Validate if the designated constraints
// aren't met.
type AssetServiceGetAssetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetServiceGetAssetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetServiceGetAssetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetServiceGetAssetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetServiceGetAssetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetServiceGetAssetResponseValidationError) ErrorName() string {
	return "AssetServiceGetAssetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssetServiceGetAssetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetServiceGetAssetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetServiceGetAssetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetServiceGetAssetResponseValidationError{}

// Validate checks the field values on AssetServiceGetAssetResponse_Metadata
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AssetServiceGetAssetResponse_Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetServiceGetAssetResponse_Metadata
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AssetServiceGetAssetResponse_MetadataMultiError, or nil if none found.
func (m *AssetServiceGetAssetResponse_Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetServiceGetAssetResponse_Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetContentType()); l < 1 || l > 256 {
		err := AssetServiceGetAssetResponse_MetadataValidationError{
			field:  "ContentType",
			reason: "value length must be between 1 and 256 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AssetServiceGetAssetResponse_MetadataMultiError(errors)
	}

	return nil
}

// AssetServiceGetAssetResponse_MetadataMultiError is an error wrapping
// multiple validation errors returned by
// AssetServiceGetAssetResponse_Metadata.ValidateAll() if the designated
// constraints aren't met.
type AssetServiceGetAssetResponse_MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetServiceGetAssetResponse_MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetServiceGetAssetResponse_MetadataMultiError) AllErrors() []error { return m }

// AssetServiceGetAssetResponse_MetadataValidationError is the validation error
// returned by AssetServiceGetAssetResponse_Metadata.Validate if the
// designated constraints aren't met.
type AssetServiceGetAssetResponse_MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetServiceGetAssetResponse_MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetServiceGetAssetResponse_MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetServiceGetAssetResponse_MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetServiceGetAssetResponse_MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetServiceGetAssetResponse_MetadataValidationError) ErrorName() string {
	return "AssetServiceGetAssetResponse_MetadataValidationError"
}

// Error satisfies the builtin error interface
func (e AssetServiceGetAssetResponse_MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetServiceGetAssetResponse_Metadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetServiceGetAssetResponse_MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetServiceGetAssetResponse_MetadataValidationError{}

// Validate checks the field values on AssetServiceGetAssetResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AssetServiceGetAssetResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetServiceGetAssetResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AssetServiceGetAssetResponse_DataMultiError, or nil if none found.
func (m *AssetServiceGetAssetResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetServiceGetAssetResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetData()); l < 0 || l > 1048576 {
		err := AssetServiceGetAssetResponse_DataValidationError{
			field:  "Data",
			reason: "value length must be between 0 and 1048576 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AssetServiceGetAssetResponse_DataMultiError(errors)
	}

	return nil
}

// AssetServiceGetAssetResponse_DataMultiError is an error wrapping multiple
// validation errors returned by
// AssetServiceGetAssetResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type AssetServiceGetAssetResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetServiceGetAssetResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetServiceGetAssetResponse_DataMultiError) AllErrors() []error { return m }

// AssetServiceGetAssetResponse_DataValidationError is the validation error
// returned by AssetServiceGetAssetResponse_Data.Validate if the designated
// constraints aren't met.
type AssetServiceGetAssetResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetServiceGetAssetResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetServiceGetAssetResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetServiceGetAssetResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetServiceGetAssetResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetServiceGetAssetResponse_DataValidationError) ErrorName() string {
	return "AssetServiceGetAssetResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AssetServiceGetAssetResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetServiceGetAssetResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetServiceGetAssetResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetServiceGetAssetResponse_DataValidationError{}
