// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: c1/connector/v2/entitlement.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Entitlement with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Entitlement) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Entitlement with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EntitlementMultiError, or
// nil if none found.
func (m *Entitlement) ValidateAll() error {
	return m.validate(true)
}

func (m *Entitlement) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResource() == nil {
		err := EntitlementValidationError{
			field:  "Resource",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EntitlementValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EntitlementValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EntitlementValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetId()); l < 1 || l > 1024 {
		err := EntitlementValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 1024 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDisplayName() != "" {

		if l := len(m.GetDisplayName()); l < 1 || l > 1024 {
			err := EntitlementValidationError{
				field:  "DisplayName",
				reason: "value length must be between 1 and 1024 bytes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetDescription() != "" {

		if l := len(m.GetDescription()); l < 1 || l > 2048 {
			err := EntitlementValidationError{
				field:  "Description",
				reason: "value length must be between 1 and 2048 bytes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetGrantableTo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EntitlementValidationError{
						field:  fmt.Sprintf("GrantableTo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EntitlementValidationError{
						field:  fmt.Sprintf("GrantableTo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntitlementValidationError{
					field:  fmt.Sprintf("GrantableTo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EntitlementValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EntitlementValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntitlementValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if _, ok := Entitlement_PurposeValue_name[int32(m.GetPurpose())]; !ok {
		err := EntitlementValidationError{
			field:  "Purpose",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Slug

	if len(errors) > 0 {
		return EntitlementMultiError(errors)
	}

	return nil
}

// EntitlementMultiError is an error wrapping multiple validation errors
// returned by Entitlement.ValidateAll() if the designated constraints aren't met.
type EntitlementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntitlementMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntitlementMultiError) AllErrors() []error { return m }

// EntitlementValidationError is the validation error returned by
// Entitlement.Validate if the designated constraints aren't met.
type EntitlementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntitlementValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntitlementValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntitlementValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntitlementValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntitlementValidationError) ErrorName() string { return "EntitlementValidationError" }

// Error satisfies the builtin error interface
func (e EntitlementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntitlement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntitlementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntitlementValidationError{}

// Validate checks the field values on
// EntitlementsServiceListEntitlementsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EntitlementsServiceListEntitlementsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// EntitlementsServiceListEntitlementsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// EntitlementsServiceListEntitlementsRequestMultiError, or nil if none found.
func (m *EntitlementsServiceListEntitlementsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EntitlementsServiceListEntitlementsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EntitlementsServiceListEntitlementsRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EntitlementsServiceListEntitlementsRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EntitlementsServiceListEntitlementsRequestValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 250 {
			err := EntitlementsServiceListEntitlementsRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 250",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPageToken() != "" {

		if l := len(m.GetPageToken()); l < 1 || l > 4096 {
			err := EntitlementsServiceListEntitlementsRequestValidationError{
				field:  "PageToken",
				reason: "value length must be between 1 and 4096 bytes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EntitlementsServiceListEntitlementsRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EntitlementsServiceListEntitlementsRequestValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntitlementsServiceListEntitlementsRequestValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EntitlementsServiceListEntitlementsRequestMultiError(errors)
	}

	return nil
}

// EntitlementsServiceListEntitlementsRequestMultiError is an error wrapping
// multiple validation errors returned by
// EntitlementsServiceListEntitlementsRequest.ValidateAll() if the designated
// constraints aren't met.
type EntitlementsServiceListEntitlementsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntitlementsServiceListEntitlementsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntitlementsServiceListEntitlementsRequestMultiError) AllErrors() []error { return m }

// EntitlementsServiceListEntitlementsRequestValidationError is the validation
// error returned by EntitlementsServiceListEntitlementsRequest.Validate if
// the designated constraints aren't met.
type EntitlementsServiceListEntitlementsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntitlementsServiceListEntitlementsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntitlementsServiceListEntitlementsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntitlementsServiceListEntitlementsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntitlementsServiceListEntitlementsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntitlementsServiceListEntitlementsRequestValidationError) ErrorName() string {
	return "EntitlementsServiceListEntitlementsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EntitlementsServiceListEntitlementsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntitlementsServiceListEntitlementsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntitlementsServiceListEntitlementsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntitlementsServiceListEntitlementsRequestValidationError{}

// Validate checks the field values on
// EntitlementsServiceListEntitlementsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EntitlementsServiceListEntitlementsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// EntitlementsServiceListEntitlementsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// EntitlementsServiceListEntitlementsResponseMultiError, or nil if none found.
func (m *EntitlementsServiceListEntitlementsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EntitlementsServiceListEntitlementsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EntitlementsServiceListEntitlementsResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EntitlementsServiceListEntitlementsResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntitlementsServiceListEntitlementsResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetNextPageToken() != "" {

		if l := len(m.GetNextPageToken()); l < 1 || l > 4096 {
			err := EntitlementsServiceListEntitlementsResponseValidationError{
				field:  "NextPageToken",
				reason: "value length must be between 1 and 4096 bytes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetAnnotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EntitlementsServiceListEntitlementsResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EntitlementsServiceListEntitlementsResponseValidationError{
						field:  fmt.Sprintf("Annotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntitlementsServiceListEntitlementsResponseValidationError{
					field:  fmt.Sprintf("Annotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EntitlementsServiceListEntitlementsResponseMultiError(errors)
	}

	return nil
}

// EntitlementsServiceListEntitlementsResponseMultiError is an error wrapping
// multiple validation errors returned by
// EntitlementsServiceListEntitlementsResponse.ValidateAll() if the designated
// constraints aren't met.
type EntitlementsServiceListEntitlementsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntitlementsServiceListEntitlementsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntitlementsServiceListEntitlementsResponseMultiError) AllErrors() []error { return m }

// EntitlementsServiceListEntitlementsResponseValidationError is the validation
// error returned by EntitlementsServiceListEntitlementsResponse.Validate if
// the designated constraints aren't met.
type EntitlementsServiceListEntitlementsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntitlementsServiceListEntitlementsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntitlementsServiceListEntitlementsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntitlementsServiceListEntitlementsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntitlementsServiceListEntitlementsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntitlementsServiceListEntitlementsResponseValidationError) ErrorName() string {
	return "EntitlementsServiceListEntitlementsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EntitlementsServiceListEntitlementsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntitlementsServiceListEntitlementsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntitlementsServiceListEntitlementsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntitlementsServiceListEntitlementsResponseValidationError{}
